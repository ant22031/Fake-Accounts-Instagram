{
  "hash": "5e7752530d3fd141970d861c58180bf5",
  "result": {
    "engine": "knitr",
    "markdown": "# Formal Concept Analysis\n\nEl Formal Concept Analysis, o FCA, es una técnica de análisis de datos originada en la teoría de conjuntos formales, la lógica matemática y la teoría de retículos. Su objetivo principal es descubrir y representar estructuras conceptuales dentro de conjuntos de datos, especialmente conjuntos de datos que contienen información de tipo jerárquico o taxonómico.\n\nLas pricipales aplicaiciones de FCA son la extracción de conocimiento, agrupamiento y clasificación, aprendizaje automático, conceptos, ontologías, reglas, reglas de asociación, implicaciones de atributos.\n\nPara el FCA, nuestros datos se dividen en objetos y atributos. En nuestro dataSet, los objetos son las cuentas de usuario y los atributos son las culumnas como \"Tiene foto de perfil, No tes fake, ....\".\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(fcaR)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'fcaR' was built under R version 4.3.3\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(readr)\ndatos <- read_csv(\"Data/train.csv\") \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 576 Columns: 12\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\ndbl (12): profile pic, nums/length username, fullname words, nums/length ful...\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\ndatos_refinados <- datos\n\ncolumnas_binarias = c(\"profile pic\",\"name==username\",\"external URL\",\"fake\",\"private\")\n\nfor (columna in columnas_binarias) {\n  datos_refinados[[columna]] <-  factor(datos_refinados[[columna]], labels = c(\"No\", \"Si\"))\n}\n\nfc_datos <- FormalContext$new(datos_refinados)\nfc_datos\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFormalContext with 576 objects and 12 attributes.\n# A tibble: 576 x 12\n   `profile pic` `nums/length username` `fullname words` `nums/length fullname`\n   <fct>                          <dbl>            <dbl>                  <dbl>\n 1 Si                              0.27                0                      0\n 2 Si                              0                   2                      0\n 3 Si                              0.1                 2                      0\n 4 Si                              0                   1                      0\n 5 Si                              0                   2                      0\n 6 Si                              0                   4                      0\n 7 Si                              0                   2                      0\n 8 Si                              0                   2                      0\n 9 Si                              0                   0                      0\n10 Si                              0                   2                      0\n# i 566 more rows\n# i 8 more variables: `name==username` <fct>, `description length` <dbl>,\n#   `external URL` <fct>, private <fct>, `#posts` <dbl>, `#followers` <dbl>,\n#   `#follows` <dbl>, fake <fct>\n```\n\n\n:::\n:::\n\n\n\n## Escalado\n\nComo necesitamos que nuestro dataSet sea binario, necesitamos aplicarles tecniac como el escaldo para obtener el resultado deseado:\n\n### Escalado nominal\n\nEl escalado nominal se utiliza para atributos cuyos valores son excluyentes el uno del otro, como por ejemplo, los atributos que son Si y No.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfc_datos$scale(\"profile pic\",type = \"nominal\",c(\"Si\",\"No\"))\nfc_datos$scale(\"name==username\",type = \"nominal\",c(\"Si\",\"No\"))\nfc_datos$scale(\"fake\",type = \"nominal\",c(\"Si\",\"No\"))\nfc_datos$scale(\"private\",type = \"nominal\",c(\"Si\",\"No\"))\nfc_datos$scale(\"external URL\",type = \"nominal\",c(\"Si\",\"No\"))\nfc_datos\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFormalContext with 576 objects and 17 attributes.\n# A tibble: 576 x 17\n   `profile pic = Si` `profile pic = No` `nums/length username` `fullname words`\n                <dbl>              <dbl>                  <dbl>            <dbl>\n 1                  1                  0                   0.27                0\n 2                  1                  0                   0                   2\n 3                  1                  0                   0.1                 2\n 4                  1                  0                   0                   1\n 5                  1                  0                   0                   2\n 6                  1                  0                   0                   4\n 7                  1                  0                   0                   2\n 8                  1                  0                   0                   2\n 9                  1                  0                   0                   0\n10                  1                  0                   0                   2\n# i 566 more rows\n# i 13 more variables: `nums/length fullname` <dbl>,\n#   `name==username = Si` <dbl>, `name==username = No` <dbl>,\n#   `description length` <dbl>, `external URL = Si` <dbl>,\n#   `external URL = No` <dbl>, `private = Si` <dbl>, `private = No` <dbl>,\n#   `#posts` <dbl>, `#followers` <dbl>, `#follows` <dbl>, `fake = Si` <dbl>,\n#   `fake = No` <dbl>\n```\n\n\n:::\n:::\n\n\n\n### Escalado intervalos\n\nComo los demás datos son valores continuos, tenemos que utilizar un tipo de escalado distinto. Podemos utilizar modos como el ordinal, sin embargo, este nos generaría conceptos demasiados largos, por lo que el mejor modo a emplear para estos datos es el intervalo.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfc_datos$scale(\"nums/length username\", \n         type = \"interval\", \n         values =c(0, 0.2, 0.4, 0.6, 0.8, 1)\n         )\n\nfc_datos$scale(\"nums/length fullname\", \n         type = \"interval\", \n         values = c(0, 0.2, 0.4, 0.6, 0.8, 1) \n        )\n\nfc_datos$scale(\"fullname words\", \n         type = \"interval\", \n         values = c(0, 1, 3, 5, Inf) \n         )\n\nfc_datos$scale(\"description length\", \n         type = \"interval\", \n         values =c(0, 15, 25, 80, 150)\n         )\n\nfc_datos$scale(\"#posts\", \n         type = \"interval\", \n         values =  c(0,1, 5, 10, 50, Inf)\n         )\n\nfc_datos$scale(\"#followers\", \n         type = \"interval\", \n         values = c(0, 10, 60, 200, Inf)\n         )\n\nfc_datos$scale(\"#follows\", \n         type = \"interval\", \n         values = c(0, 10, 60, 200, Inf)\n         )\n```\n:::\n\n\n\n## Conceptos\n\nUna vez tenemos los datos en la forma que buscamos, podemos utilizar el paquete fcaR para generar conceptos.Los conceptos son componentes fundamentales que representan agrupaciones de objetos y atributos con una relación particular.\n\nDe manera formal, un concepto (𝐴,𝐵) se define como un par donde:\n\n-   𝐴 es el conjunto de objetos (extensión) que tienen todos los atributos de 𝐵.\n\n-   𝐵 es el conjunto de atributos (intensión) que son poseídos por todos los objetos de 𝐴.\n\n### Calculo de los conceptos del contexto\n\nPara calcular los conceptos de nuestros datos utilizamos la función `find_concepts`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfc_datos$find_concepts()\n\nfc_datos$concepts$size()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7008\n```\n\n\n:::\n:::\n\n\n\nVemos que hemos obtenido un gran numero de conceptos, vamos a ver los primeros:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(fc_datos$concepts)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nA set of 6 concepts:\n1: ({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576}, {})\n2: ({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288}, {fake = No})\n3: ({1, 2, 4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 31, 32, 34, 35, 36, 37, 38, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 106, 107, 108, 109, 111, 112, 113, 115, 116, 117, 118, 119, 120, 122, 123, 126, 127, 128, 130, 131, 132, 133, 134, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 223, 224, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 241, 244, 246, 248, 250, 251, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 277, 278, 279, 280, 282, 284, 285, 286, 289, 291, 293, 296, 303, 310, 317, 320, 322, 324, 325, 328, 332, 338, 339, 343, 344, 349, 354, 356, 359, 360, 361, 378, 380, 382, 385, 399, 401, 403, 415, 420, 421, 422, 427, 428, 434, 436, 443, 445, 447, 451, 454, 460, 461, 462, 467, 471, 476, 482, 483, 491, 508, 509, 511, 512, 518, 523, 527, 531, 532, 534, 535, 536, 538, 539, 541, 542, 547, 549, 553, 554, 558, 561, 563, 566, 567, 568, 570, 572, 574, 576}, {#follows is (200, Inf]})\n4: ({3, 5, 6, 7, 8, 25, 26, 28, 29, 30, 33, 39, 40, 47, 61, 63, 64, 73, 105, 110, 114, 121, 124, 125, 129, 135, 140, 145, 150, 160, 163, 182, 183, 189, 190, 191, 192, 204, 216, 217, 222, 225, 227, 238, 240, 243, 249, 252, 253, 258, 274, 283, 288, 292, 294, 306, 318, 323, 334, 335, 345, 347, 348, 352, 358, 362, 363, 364, 365, 368, 370, 372, 376, 381, 383, 391, 393, 395, 396, 397, 400, 402, 404, 405, 406, 407, 410, 411, 413, 416, 417, 419, 424, 429, 431, 433, 435, 438, 439, 440, 444, 446, 448, 450, 453, 457, 458, 463, 474, 477, 484, 488, 528, 530, 546, 548, 550, 555, 560, 562, 564, 569, 571, 573, 575}, {#follows is (60, 200]})\n5: ({41, 44, 76, 102, 104, 205, 242, 245, 247, 259, 273, 281, 287, 290, 295, 297, 299, 300, 305, 307, 311, 312, 313, 314, 315, 319, 321, 326, 327, 329, 330, 331, 333, 336, 342, 350, 351, 353, 355, 357, 366, 367, 369, 371, 373, 374, 375, 379, 384, 386, 387, 388, 389, 390, 394, 398, 408, 414, 423, 425, 426, 432, 437, 441, 442, 449, 452, 455, 459, 464, 465, 466, 473, 475, 478, 479, 481, 485, 487, 492, 494, 495, 496, 498, 500, 501, 502, 503, 505, 506, 507, 510, 513, 515, 521, 522, 526, 529, 533, 540, 543, 544, 545, 551, 552, 556, 557, 565}, {#follows is (10, 60]})\n6: ({45, 166, 298, 301, 304, 308, 309, 316, 337, 341, 377, 409, 412, 418, 430, 456, 468, 469, 470, 472, 480, 486, 490, 504, 514, 516, 519, 524, 525, 537, 559}, {#follows is (0, 10]})\n```\n\n\n:::\n:::\n\n\n\nObservamos un curioso resultado, vemos una gran cantidad de números, estos números representan los indices de las cuentas que tienen dichos atributos. Sin embargo, esta información no nos es útil. Vamos a calcular el extend al atributo \"*fake = Si\"*, y vemos que nos devuelve los indices de todas las cuentas que son fake.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ns1 <- Set$new(fc_datos$attributes)\ns1$assign(fake = \"Si\")\nfc_datos$extent(s1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\n  23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,\n  42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n  61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n  80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,\n  99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114,\n  115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,\n  130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144,\n  145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n  160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174,\n  175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189,\n  190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204,\n  205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219,\n  220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234,\n  235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249,\n  250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264,\n  265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279,\n  280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294,\n  295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309,\n  310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324,\n  325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339,\n  340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354,\n  355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369,\n  370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384,\n  385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399,\n  400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414,\n  415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429,\n  430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444,\n  445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459,\n  460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474,\n  475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489,\n  490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504,\n  505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519,\n  520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534,\n  535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549,\n  550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564,\n  565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576}\n```\n\n\n:::\n:::\n\n\n\n## Implicaciones\n\nLas implicaciones son reglas derivadas de los datos que describen relaciones lógicas entre conjuntos de atributos. En FCA, las implicaciones se extraen a partir de los conceptos y se utilizan para describir las dependencias entre los atributos de manera formal.\n\nEstas implicaciones las podemos ver como las reglas de asociación que obtuvimos anteriormente.\n\n### Calculo de los implicaciones del contexto\n\nPara calcular las implicaciones de nuestros datos utilizamos la función `find_implications`\n\n### ¿Cuantas implicaciones se han extraido?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfc_datos$find_implications()\n\nfc_datos$implications$cardinality()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1905\n```\n\n\n:::\n:::\n\n\n\nVemos que hemos obtenido un gran numero de implicaciones, vamos a ver los primeros:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(fc_datos$implications)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nImplication set with 6 implications.\nRule 1: {fake = Si} -> {external URL = No}\nRule 2: {#follows is (200, Inf], fake = No} -> {name==username = No}\nRule 3: {#follows is (60, 200], fake = No} -> {profile pic = Si}\nRule 4: {#follows is (60, 200], #follows is (200, Inf]} -> {profile pic = Si,\n  profile pic = No, nums/length username is (0, 0.2], nums/length username\n  is (0.2, 0.4], nums/length username is (0.4, 0.6], nums/length username\n  is (0.6, 0.8], nums/length username is (0.8, 1], fullname words is (0, 1],\n  fullname words is (1, 3], fullname words is (3, 5], fullname words is (5,\n  Inf], nums/length fullname is (0, 0.2], nums/length fullname is (0.2, 0.4],\n  nums/length fullname is (0.4, 0.6], nums/length fullname is (0.6, 0.8],\n  nums/length fullname is (0.8, 1], name==username = Si, name==username = No,\n  description length is (0, 15], description length is (15, 25], description\n  length is (25, 80], description length is (80, 150], external URL = Si,\n  external URL = No, private = Si, private = No, #posts is (0, 1], #posts is (1,\n  5], #posts is (5, 10], #posts is (10, 50], #posts is (50, Inf], #followers is\n  (0, 10], #followers is (10, 60], #followers is (60, 200], #followers is (200,\n  Inf], #follows is (0, 10], #follows is (10, 60], fake = Si, fake = No}\nRule 5: {#follows is (10, 60], fake = No} -> {profile pic = Si, name==username =\n  No}\nRule 6: {#follows is (10, 60], #follows is (200, Inf]} -> {profile pic = Si,\n  profile pic = No, nums/length username is (0, 0.2], nums/length username\n  is (0.2, 0.4], nums/length username is (0.4, 0.6], nums/length username\n  is (0.6, 0.8], nums/length username is (0.8, 1], fullname words is (0, 1],\n  fullname words is (1, 3], fullname words is (3, 5], fullname words is (5,\n  Inf], nums/length fullname is (0, 0.2], nums/length fullname is (0.2, 0.4],\n  nums/length fullname is (0.4, 0.6], nums/length fullname is (0.6, 0.8],\n  nums/length fullname is (0.8, 1], name==username = Si, name==username = No,\n  description length is (0, 15], description length is (15, 25], description\n  length is (25, 80], description length is (80, 150], external URL = Si,\n  external URL = No, private = Si, private = No, #posts is (0, 1], #posts is (1,\n  5], #posts is (5, 10], #posts is (10, 50], #posts is (50, Inf], #followers is\n  (0, 10], #followers is (10, 60], #followers is (60, 200], #followers is (200,\n  Inf], #follows is (0, 10], #follows is (60, 200], fake = Si, fake = No}\n```\n\n\n:::\n:::\n\n\n\nComo tenemos un gran numero de implicaciones, vamos a intentar reducirlas y quedarnos con las mas importantes aplicando técnicas de simplificación.\n\n### Calculo del tamaño de las implicaciones y la media de la parte y derecha de dichas implicaciones.\n\nEste calculo nos proporciona una medida cuantitativa de las relaciones entre atributos. El tamaño de una implicación se refiere al número de atributos en sus conjuntos de premisa A y su consecuente B. La media de estos tamaños se obtiene haciendo la media del número de atributos en las partes izquierda y derecha de todas las implicaciones, ofreciendo una visión general.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolMeans(fc_datos$implications$size())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     LHS      RHS \n5.809974 4.205249 \n```\n\n\n:::\n:::\n\n\n\nCon esto valores obtenemos, en la parte derecha de la regla suele haber una media de 5,8 elementos mientras que en la parte derecha una media de 4,2 elementos.\n\n### Lógica de simplificación.\n\nVamos a intentar de simplificar nuestras implicaciones para poder quedarnos con las mas importantes y significativas.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfc_datos$implications$apply_rules(rules = c(\"simplification\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nProcessing batch\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n--> Simplification: from 1905 to 1905.\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(fc_datos$implications)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nImplication set with 6 implications.\nRule 1: {fake = Si} -> {external URL = No}\nRule 2: {#follows is (200, Inf], fake = No} -> {name==username = No}\nRule 3: {#follows is (60, 200], fake = No} -> {profile pic = Si}\nRule 4: {#follows is (60, 200], #follows is (200, Inf]} -> {profile pic = Si,\n  profile pic = No, nums/length username is (0, 0.2], nums/length username\n  is (0.2, 0.4], nums/length username is (0.4, 0.6], nums/length username\n  is (0.6, 0.8], nums/length username is (0.8, 1], fullname words is (0, 1],\n  fullname words is (1, 3], fullname words is (3, 5], fullname words is (5,\n  Inf], nums/length fullname is (0, 0.2], nums/length fullname is (0.2, 0.4],\n  nums/length fullname is (0.4, 0.6], nums/length fullname is (0.6, 0.8],\n  nums/length fullname is (0.8, 1], name==username = Si, name==username = No,\n  description length is (0, 15], description length is (15, 25], description\n  length is (25, 80], description length is (80, 150], external URL = Si,\n  external URL = No, private = Si, private = No, #posts is (0, 1], #posts is (1,\n  5], #posts is (5, 10], #posts is (10, 50], #posts is (50, Inf], #followers is\n  (0, 10], #followers is (10, 60], #followers is (60, 200], #followers is (200,\n  Inf], #follows is (0, 10], #follows is (10, 60], fake = Si, fake = No}\nRule 5: {#follows is (10, 60], fake = No} -> {profile pic = Si, name==username =\n  No}\nRule 6: {#follows is (10, 60], #follows is (200, Inf]} -> {profile pic = Si,\n  profile pic = No, nums/length username is (0, 0.2], nums/length username\n  is (0.2, 0.4], nums/length username is (0.4, 0.6], nums/length username\n  is (0.6, 0.8], nums/length username is (0.8, 1], fullname words is (0, 1],\n  fullname words is (1, 3], fullname words is (3, 5], fullname words is (5,\n  Inf], nums/length fullname is (0, 0.2], nums/length fullname is (0.2, 0.4],\n  nums/length fullname is (0.4, 0.6], nums/length fullname is (0.6, 0.8],\n  nums/length fullname is (0.8, 1], name==username = Si, name==username = No,\n  description length is (0, 15], description length is (15, 25], description\n  length is (25, 80], description length is (80, 150], external URL = Si,\n  external URL = No, private = Si, private = No, #posts is (0, 1], #posts is (1,\n  5], #posts is (5, 10], #posts is (10, 50], #posts is (50, Inf], #followers is\n  (0, 10], #followers is (10, 60], #followers is (60, 200], #followers is (200,\n  Inf], #follows is (0, 10], #follows is (60, 200], fake = Si, fake = No}\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfc_datos$implications$cardinality()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1905\n```\n\n\n:::\n:::\n\n\n\nVemos que el numero de implicaciones no se ha reducido, como podíamos haber pensado. Esto se debe a que al simplificar realmente no reduce la cantidad e implicaciones, sino los atributos de estas, eliminando verdades absolutas o otras parámetros redundantes.\n\n#### Eliminar la redundancia.\n\nVamos también a aplicar `composition, generalization, simplification y rsimplification` para eliminar la redundancia dentro de las implicaciones.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfc_datos$implications$apply_rules(rules = c(\"composition\",\n                                              \"generalization\",\n                                             \"simplification\",\n                                             \"rsimplification\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nProcessing batch\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n--> Composition: from 1905 to 1905.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n--> Generalization: from 1905 to 1905.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n--> Simplification: from 1905 to 1905.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n--> Right Simplification: from 1905 to 1905.\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(fc_datos$implications)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nImplication set with 6 implications.\nRule 1: {fake = Si} -> {external URL = No}\nRule 2: {#follows is (200, Inf], fake = No} -> {name==username = No}\nRule 3: {#follows is (60, 200], fake = No} -> {profile pic = Si}\nRule 4: {#follows is (60, 200], #follows is (200, Inf]} -> {#follows is (0, 10]}\nRule 5: {#follows is (10, 60], fake = No} -> {profile pic = Si, name==username =\n  No}\nRule 6: {#follows is (10, 60], #follows is (200, Inf]} -> {#follows is (0, 10]}\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfc_datos$implications$cardinality()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1905\n```\n\n\n:::\n:::\n\n\n\nAl igual que antes, el numero de implicaciones no se ha reducido, como podíamos haber pensado. Esto se debe a que al simplificar realmente no reduce la cantidad e implicaciones, sino los atributos de estas, eliminando verdades absolutas o otras parámetros redundantes.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolMeans(fc_datos$implications$size())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     LHS      RHS \n3.317060 1.247769 \n```\n\n\n:::\n:::\n\n\n\nAhora, despues de simplificar nuestras implicaciones, la media de atributos de cada parte de la regla ha bajado considerablemente.\n\n### Análisis de implicaciones importantes\n\nAl igual que con las reglas, nos interesa las implicaciones que tengan en su parte derecha los atributos sobre si la cuenta es falsa o no, puesto que nuestro objetivo es detectar estas cuentas falsas.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(fc_datos$implications$filter(rhs=\"fake = Si\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nImplication set with 6 implications.\nRule 1: {#followers is (10, 60], #follows is (200, Inf]} -> {fake = Si}\nRule 2: {#followers is (10, 60], #follows is (0, 10]} -> {name==username = No,\n  private = No, fake = Si}\nRule 3: {#followers is (0, 10], #follows is (60, 200]} -> {name==username = No,\n  private = Si, fake = Si}\nRule 4: {#followers is (0, 10], #follows is (0, 10]} -> {fake = Si}\nRule 5: {private = No, #followers is (0, 10]} -> {fake = Si}\nRule 6: {description length is (25, 80], #posts is (1, 5], #follows is (10, 60]}\n  -> {fake = Si}\n```\n\n\n:::\n:::\n\n\n\nObervando esta serie de reglas, podemos obtener gran cantidad de informacion para poder detectar y diferencia rlas cuentas fake de las reales. Por ejemplo, una que puede parcer muy obvia, que si sigue a mucha gente, pero le siguen poca gente, es falsa.\n\nVamos a ver tambien las cuentas reales:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(fc_datos$implications$filter(rhs=\"fake = No\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nImplication set with 6 implications.\nRule 1: {#followers is (200, Inf], #follows is (10, 60]} -> {private = No, fake\n  = No}\nRule 2: {external URL = Si} -> {profile pic = Si, fake = No}\nRule 3: {#posts is (50, Inf], #follows is (0, 10]} -> {private = No, #followers\n  is (200, Inf], fake = No}\nRule 4: {#posts is (0, 1], #followers is (200, Inf]} -> {#follows is (200, Inf],\n  fake = No}\nRule 5: {description length is (25, 80], #posts is (50, Inf]} -> {profile pic =\n  Si, fake = No}\nRule 6: {description length is (25, 80], #posts is (5, 10]} -> {fake = No}\n```\n\n\n:::\n:::\n\n\n\nAl contrario que lo anterior, si sigue a poca gente y le sigue mucha gente, significa que la cuenta es real.\n\nAmbas suposiciones las podemos obtener gracias a que sabemos que para seguir a una persona, no es necesario que esa persona de su consentimiento, sino que puede ser algo automático. Sin embargo, obtener seguidores requiere a una segunda persona que desee seguir a esa cuenta, pudiendo verla previamente, lo que es mas difícil de conseguir para cuentas fake.\n\n## Funciones interesantes\n\nDentro del paquete de fcaR hay funciones interesantes para bien exportar a Latex, a arules, ...\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreglas <- fc_datos$implications$to_arules()\n#latex <- fc_datos$implications$to_latex()\n```\n:::\n\n\n\nTambién podemos hacer gráficos de nuestros conceptos:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#fc_datos$concepts$plot()\n```\n:::\n",
    "supporting": [
      "fca_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}