{
  "hash": "855c0ed72b29234c9a89aa567430818a",
  "result": {
    "engine": "knitr",
    "markdown": "---\nfilters:\n  - shinylive\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nmodelo_guardado <- readRDS(\"modelo_regresion.rds\")\n```\n:::\n\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 600\nlibrary(shiny)\nlibrary(tibble)\n\n\n\n# Define your Shiny UI here\nui <- fluidPage(\n  titlePanel(\"Análisis de Perfil de Usuario\"),\n  sidebarLayout(\n    sidebarPanel(\n      checkboxInput(\"profile_pic\", \"Tiene foto de perfil?\", value = FALSE),\n      numericInput(\"username_ratio\", \"Cantidad de numeros en nombre del usuario:\", value = 0),\n      numericInput(\"fullname_ratio\", \"Cantidad de numeros en el nombre completo:\", value = 0),\n      numericInput(\"fullname_length\", \"Longitud del nombre completo:\", value = 0),\n      checkboxInput(\"name_equals_username\", \"¿El nombre es igual al nombre de usuario?\", value = FALSE),\n      numericInput(\"description_length\", \"Longitud de la descripción:\", value = 0),\n      checkboxInput(\"external_url\", \"Tiene URL externa?\", value = FALSE),\n      checkboxInput(\"private\", \"¿Es una cuenta privada?\", value = FALSE),\n      numericInput(\"num_posts\", \"Número de publicaciones:\", value = 0),\n      numericInput(\"num_followers\", \"Número de seguidores:\", value = 0),\n      numericInput(\"num_follows\", \"Número de seguidos:\", value = 0),\n      actionButton(\"submit_button\", \"Analizar\")\n    ),\n    mainPanel(\n      verbatimTextOutput(\"results\")\n    )\n  )\n)\n\nprocesar_datos <- function(profile_pic, username_ratio, fullname_ratio, fullname_length, name_equals_username,\n                           description_length, external_url, private, num_posts, num_followers, num_follows) {\n\n  datos <- tibble(`profile pic` = ifelse(profile_pic, 1, 0),\n                        `nums/length username` = as.numeric(username_ratio),\n                        `fullname words` = as.numeric(fullname_length),\n                        `nums/length fullname` = as.numeric(fullname_ratio),\n                        `name==username` = ifelse(name_equals_username, 1, 0),\n                        `description length` = as.numeric(description_length) ,\n                        `external URL` = ifelse(external_url, 1, 0) ,\n                        `private` = ifelse(private, 1, 0) ,\n                        `#posts` = as.numeric(num_posts) ,\n                        `#followers` = as.numeric(num_followers) ,\n                        `#follows` = as.numeric(num_follows),\n                        `fake` = 1,\n                        `log_description_length` = log(as.numeric(description_length) + 1),\n                        `log_posts` = log(as.numeric(num_posts)+1))\n  \n  prediction <- predict(modelo_guardado, newdata = datos)\n  return(ifelse(prediction[[1]] <0.5 , \"Cuenta real\", \"Cuenta falsa\"))\n}\n\n# Define your Shiny server logic here\nserver <- function(input, output, session) {\n  # Manejar el evento del botón de enviar\n  observeEvent(input$submit_button, {\n    # Llama a la función para procesar los datos y muestra los resultados\n    res <- procesar_datos(input$profile_pic, input$username_ratio, input$fullname_ratio, input$fullname_length,\n                     input$name_equals_username, input$description_length, input$external_url, input$private,\n                     input$num_posts, input$num_followers, input$num_follows)\n    output$results <- renderPrint({\n      res\n    })\n  })\n}\n\n# Create and launch the Shiny app\nshinyApp(ui, server)\n```\n",
    "supporting": [
      "seriesTemporales_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}