# Análisis exploratorio de datos.

El análisis exploratorio de datos consiste en analizar el conjunto o conjuntos de datos de entrada con el objetivo de resumir sus características principales ayudando a su comprensión para futuras técnicas. Es una fase crucial en la ciencia de datos, ya que ayuda a los analistas de datos a comprender mejor los datos antes de aplicar modelos estadísticos más complejos o herramientas mas sofisticadas.

Para realizar dicho análisis, vamos a utilizar el *meta-package* de `tidyverse.`

## Carga de datos

Como hemos visto anteriormente, el dataSet contienen dos archivos con datos, sin embargo, puesto que el archivo de *train.csv* contiene mas entradas de datos, vamos a utilizar dicho conjunto de datos para aplicarle nuestras técnicas de análisis.

En primer lugar, vamos a cargar las librerias necesarias y los datos:

```{r}
library(tidyverse) 
library(readr) 
datos <- read_csv("Data/train.csv") 
```

Una vez tenemos nuestros datos, podemos ponernos manos a la obra.

Vamos a comenzar ojeando cuantas filas tenemos:

```{r}
nrow(datos)
```

Y también vemos cuantos atributos tiene cada fila y sus nombres:

```{r}
ncol(datos)  
```

```{r}
colnames(datos)
```

Veamos las primeras filas del dataset

```{r}
head(datos)
```

Podemos ver que todas las columnas tienen valores numericos, pero vamos a comprobarlo mirando dentro su estructura:

```{r}
str(datos)
```

Hemos comprobado que todos los valores son del tipo numerico y double.

```{r}
anyNA(datos)
```

Por ultimo comprobamos que no existen valores NA dentro del dataset, lo que nos ayudara en su próximo análisis exploratorio.

## Analisis de atributos

Una vez visto un poco por encima la estructura del dataSet, vamos a explorar uno a uno los atributos de cada fila, explorando su significado, los valores limite, ...

### profile pic

Este es un atributo binario que indica si un usuario tiene foto de perfil. Por lo tanto solo tenemos o 0 o 1.

```{r}
str(datos$`profile pic`)

anyNA(datos$`profile pic`)

```

Vemos que esta columna no contiene ningun NA.

Vamos a visualizar la proporcion de usuarios con foto de perfil:

```{r}
hist(datos$`profile pic`, breaks = 2, main="Fotos de perfil" )
```

Observamos que más de la mitad de los usuarios tienen foto de perfil.

### nums/length username

Este atributo representa el ratio de numero de caracteres numericos en el nombre de usuario respecto su longutud. Ej: Ant234 -\> Ratio 1.

```{r}
hist(datos$`nums/length username`, main="Ratio caracteres num en usuario" )
```

### fullname words

Este atributo representa la cantidad de palabras que componen el nombre del usuario.

```{r}
max(datos$`fullname words`)
```

Observamos que hay uno o varios usuarios cuyo nombre tiene 12 palabras de longitud, algo que es poco común.

```{r}
hist(datos$`fullname words`, main="Num palabra nombre" )
```

Analizando el histograma, vemos que la mayoría de usuarios tiene entre 0 y 1 palabras en su nombre.

```{r}
count(filter(datos,`fullname words`==1 | `fullname words`==2))/count(datos)*100
```

En concreto el 81,6% de los datos tienen entre 0 y 1 palabras en su nombre.

### nums/length fullname

Este atributo representa el ratio de numero de caracteres numéricos en el nombre completo del usuario respecto su longitud.

```{r}
hist(datos$`nums/length fullname`, main="Ratio caracteres num en nombre" )
```

Observamos que es bastante inusual que un usuario tenga caracteres en su nombre completo, mientra que, como hemos visto antes, en el nombre de usuario, es más frecuente encontrar caracteres.

### name==username

Este atributo es un atributo binario que representa si el usuario tiene el mismo nombre de usuario y nombre completo.

```{r}
hist(datos$`name==username`, breaks = 2, main="Nombre igual a usuario" )
```

Concluimos que el bastante inusual que un usuarios tenga el mismo nombre de usuario y nombre completo.

### description length

Este atributo representa la longitud de la descripción del perfil de usuario (en caracteres).

```{r}
hist(datos$`description length`, main="Num carateres de la descripcion" )
```

Podemos intuir que el máximo de caracteres que ofrece Instagram en su descripción es 150, cuyo limite es alcanzado por pocos usuarios del DataSet:

```{r}
filter(datos,datos$`description length` ==150) %>% count() %>% summarise(`Num de usuarios`=n)
```

Viendo el histograma, descubrimos que la mayoría de usuarios tienen una descripción con pocos caracteres, pero vamos a calcular la media para poder tener una idea:

```{r}
mean(datos$`description length`)
```

Encontramos que la media de caracteres en la descripción, lo que, dependiendo del idioma, puede ser una pequeña frase o algunas palabras. Las descripciones largar son menos frecuentes.

### external URL

Este atributo es un atributo binario que representa si el perfil tiene algún enlaza externo en el.

```{r}
hist(datos$`external URL`, breaks = 2, main="Enlace en el perfil?" )
```

Lo mas común son los perfiles sin enlaces externos.

### private

Este atributo es un atributo binario que representa si el perfil es privado o publico.

```{r}
hist(datos$`private`, breaks = 2, main="Perfil privado?" )
```

En este atributo encontramos algo mas de igualdad, el numero de cuentas privadas son poco mas de la mitad del numero de publicas:

```{r}
datos %>% mutate(private = ifelse(private==1,"Privada","Publica")) %>%  group_by(private) %>% count() %>%  summarise(Numero = sum(n))  

```

### post

Este atributo representa el numero de publicaciones de la cuenta.

```{r}
hist(datos$`#posts`,  main="Fotos de perfil" )
max(datos$`#posts`)
```

Obtenemos un histograma un poco extrano al haber algun valor muy alto de publicaciones, vamos a buscarlo:

```{r}
max(datos$`#posts`)
```

Vemos que es un valor bastante raro o que se podría tratar de alguna cuenta que publicase mucho contenido a diario. Vamos a verla:

```{r}
datos %>% filter(`#posts`==7389)
```

Como dato, la cuenta de Dwayne Johnson, ex-luchador de la WWE y exitoso actor de Hollywood, tiene unos 7800 post, por lo que dicho valor puede ser debido a la cuenta de algún famoso.

Vamos a volver a dibujar el histograma pero con un umbral un poco mas razonable:

```{r}
post_filtrados <- datos %>% select(`#posts`)%>% filter(`#posts` <500)
hist(post_filtrados$`#posts`)
```

Ahora ya podemos extraer informacion mas facilmente, como que la mayoria de usuarios tiene menos de 50 publicaciones, vamos a verlo en mas detalle:

```{r}
post_filtrados <- datos %>% select(`#posts`)%>% filter(`#posts` <50)
hist(post_filtrados$`#posts`)
```

Observamos que hay un gran numero de usuarios con menos de 5 posts. Vamos a ver cuantos de ellos tiene 0 posts y a ver la media total:

```{r}
datos %>% filter(`#posts`==0) %>% count()

mean(datos$`#posts`)
```

Aunque como antes hemos visto que hay usuarios con un gran numero de posts, esta media puede ser no muy significativa.

Vamos a analizar entonces sus cuartiles y mediana:

```{r}
summary(datos$`#posts`)
```

### followers

Este atributo representa el numero de seguidores de la cuenta.

```{r}
hist(datos$`#followers`, main="Numero de seguidores" )
max(datos$`#followers`)
```

Como en el atributo anteriro, este histograma no tiene sentido porque hay algun valor muy alto

```{r}
max(datos$`#followers`)
```

Dicho valor solo tiene sentido que sea debido a una cuenta de alguna celebridad, vamos a comprobar si es el mismo que tiene similitud con el valor anómalo de post encontrado anteriormente:

```{r}
datos %>% filter (`#followers`==max(`#followers`)) %>% select(`#posts`)
```

Aun pudiendo ser la cuenta de una celebridad, vemos que tiene un numero de post relativamente normal, comparado con el valor de 7389 post que obtuvimos anteriormente.

Vamos a volver a hacer el histograma con un nuevo umbral mas bajo:

```{r}
followers_filtrados <- datos %>% select(`#followers`)%>% filter(`#followers` <1000)
hist(followers_filtrados$`#followers`)
```

Observamos que la mayoría de usuarios no tiene gran numero de seguidores, en concreto, menos de 100.

Vamos a verlo

```{r}
followers_filtrados <- datos %>% select(`#followers`)%>% filter(`#followers` <100)
hist(followers_filtrados$`#followers`)
```

Vemos que en este intervalo, si esta mas repartidas las frecuencias. Aunque resulta curioso que una gran cantidad de usuarios no llegue a los 50 seguidores.

Viendo que hay algunos usuarios con un gran numero de seguidores, no tiene sentido tomar el valor de la mediana como referencia ya que esta no es significativa en este caso, por lo que vamos a analizar los cuartiles y la mediana en su lugar.

```{r}
mean(datos$`#followers`)
summary(datos$`#followers`)
```

Sabiendo que la mediana divide al 50% de los datos, dicho valor es mas significativo que la media.

### follows

Este atributo representa el numero de usuarios seguidos por la cuenta.

```{r}
hist(datos$`#follows`, main="Numero de seguidos" )
max(datos$`#follows`)
```

Al igual que en los dos anteriores, los valores máximos hacen que nuestro histograma no sea muy entendible, vamos a estudiarlo:

```{r}
max(datos$`#follows`)
```

Dicho valor corresponde con el valor máximo de cuentas que Instagram permite a los usuarios seguir para reducir el spam. Por lo tanto, las cuentas que siguen a un gran numero de personas se pueden llegar a asociar a spammers. Vamos a ver cuantas cuentas están en este limite:

```{r}
count(filter(datos,datos$`#follows`==7500))
```

Ahora para poder ahcernos una mejor idea vamos a volver a dibujar el histograma con un nuevo umbral reducido.

```{r}
follows_filtrados <- datos %>% select(`#follows`)%>% filter(`#follows` <1000)
hist(follows_filtrados$`#follows`)
```

Observamos que mas de la mitad de usuarios no sigue a muchas otras cuentas, en concreto, menos de 100.

Vamos a verlo:

```{r}
follows_filtrados <- datos %>% select(`#follows`)%>% filter(`#follows` <100)
hist(follows_filtrados$`#follows`)
```

Vemos que en este intervalo, si esta mas repartidas las frecuencias.

Viendo que hay algunos usuarios con un gran numero de cuentas seguidas, no tiene sentido tomar el valor de la mediana como referencia ya que esta no es significativa en este caso, por lo que vamos a analizar los cuartiles y la mediana en su lugar.

```{r}
summary(datos$`#follows`)
```

Ahora ya con estos valores ya podemos analizarlo un poco mejor y darnos cuenta que el 50% de los usuarios no sigue a mas de 229 cuentas.

### fake

Por ultimo, este atributo es un atributo binario que representa si el perfil es verdadero o es un spammer.

```{r}
hist(datos$fake, breaks = 2, main="Fake o no" )
```

Observamos que nuestro DataSet tiene un 50% de cuentas falsas y otro 50% de cuentas verdaderas.

## Herramienta de DataExplorer

```{r}
library(DataExplorer)
#create_report(datos)
```

DataExplorer: Automate Data Exploration and Treatment

:   Automated data exploration process for analytic tasks and predictive modeling, so that users could focus on understanding data and extracting insights. The package scans and analyzes each variable, and visualizes them with typical graphical techniques. Common data processing methods are also available to treat and format data.

La librería DataExplorer es una herramienta diseñada para simplificar y acelerar el proceso de exploración y análisis de datos. Proporciona funciones que permiten generar rápidamente resúmenes estadísticos, visualizaciones y diagnósticos de los datos.

Algunas de las características clave incluyen la capacidad de generar perfiles de datos detallados, identificar valores atípicos, analizar la distribución de variables y explorar relaciones entre variables.

Podemos simplificar el proceso realizado anteriormente utilizando este paquete.

### Funciones interesantes

#### introduce

Genera un pequeño reporte con los datos mas relevantes como el numero de columnas, el tamano del datset, ...

```{r}
introduce(datos)
plot_intro(datos)
```

#### plot_histogram

Esta funcion nos muestra todos los histogramas de las variables/columnas.

```{r}
plot_histogram(datos)
```

#### plot_qq

Este comando genera un gráfico de cuantiles-cuantiles, el cual es una forma de visualizar la desviación de una distribución de probabilidad específica.

```{r}
plot_qq(datos)
```

#### create_report

Este comando realiza las medidas mencionadas anteriormente y muchas otras que son útiles (como el análisis de componentes principales) para el análisis exploratorio y genera como salida un reporte completo de nuestros datos.

```{r}
#create_report(datos)
```
