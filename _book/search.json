[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Fake Accounts Instagram",
    "section": "",
    "text": "Introducción\nEste book recoge el proyecto realizado en la asignatura de Laboratorio de Computación Científica de la Universidad de Málaga.\nEl objetivo de este proyecto es el análisis de un dataset de la plataforma Kaggle para extraer el máximo conocimiento posible usando las técnicas vistas durante la asignatura.\n\n\n1. DataSet:\nEl dataset que vamos a utilizar se llama ‘Instagram fake spammer genuine accounts’, obtenido de la web de Kaggle. Este dataset se compone de diferentes cuentas de Instagram, tanto de spammers como de usuarios genuinos.\nDicho dataset está formado por dos archivos, por un lado, test.csv, un set de 120 entradas, 60 de cuentas genuinas y 60 de cuentas de spammer. Y por otro lado, otro archivo train.csv, formado por 576 entradas, donde al igual que en el archivo anterior, la mitad son cuentas genuinas y la otra mitad son spammers.\n\nSpammer\n\nEl «spam» es cualquier comunicación no solicitada enviada en masa.El «spamming» (que en español podría traducirse como «espamear») es el acto de enviar estos mensajes. Y la persona que envía los mensajes es un «spammer».\n\n\nEnlace al DataSet",
    "crumbs": [
      "Introducción"
    ]
  },
  {
    "objectID": "analisisExploratorio.html",
    "href": "analisisExploratorio.html",
    "title": "1  Análisis exploratorio de datos.",
    "section": "",
    "text": "1.1 Carga de datos\nComo hemos visto anteriormente, el dataset contiene dos archivos con datos. Sin embargo, puesto que el archivo train.csv contiene más entradas de datos, vamos a utilizar dicho conjunto de datos para aplicar nuestras técnicas de análisis.\nEn primer lugar, vamos a cargar las librerías necesarias y los datos:\nlibrary(tidyverse) \n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(readr) \ndatos &lt;- read_csv(\"Data/train.csv\") \n\nRows: 576 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (12): profile pic, nums/length username, fullname words, nums/length ful...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nUna vez tenemos nuestros datos, podemos ponernos manos a la obra.\nVamos a comenzar ojeando cuántas filas tenemos:\nnrow(datos)\n\n[1] 576\nY también vemos cuantos atributos tiene cada fila y sus nombres:\nncol(datos)  \n\n[1] 12\ncolnames(datos)\n\n [1] \"profile pic\"          \"nums/length username\" \"fullname words\"      \n [4] \"nums/length fullname\" \"name==username\"       \"description length\"  \n [7] \"external URL\"         \"private\"              \"#posts\"              \n[10] \"#followers\"           \"#follows\"             \"fake\"\nVeamos las primeras filas del dataset\nhead(datos)\n\n# A tibble: 6 × 12\n  `profile pic` `nums/length username` `fullname words` `nums/length fullname`\n          &lt;dbl&gt;                  &lt;dbl&gt;            &lt;dbl&gt;                  &lt;dbl&gt;\n1             1                   0.27                0                      0\n2             1                   0                   2                      0\n3             1                   0.1                 2                      0\n4             1                   0                   1                      0\n5             1                   0                   2                      0\n6             1                   0                   4                      0\n# ℹ 8 more variables: `name==username` &lt;dbl&gt;, `description length` &lt;dbl&gt;,\n#   `external URL` &lt;dbl&gt;, private &lt;dbl&gt;, `#posts` &lt;dbl&gt;, `#followers` &lt;dbl&gt;,\n#   `#follows` &lt;dbl&gt;, fake &lt;dbl&gt;\nPodemos ver que todas las columnas tienen valores numéricos, pero vamos a comprobarlo mirando dentro su estructura:\nstr(datos)\n\nspc_tbl_ [576 × 12] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ profile pic         : num [1:576] 1 1 1 1 1 1 1 1 1 1 ...\n $ nums/length username: num [1:576] 0.27 0 0.1 0 0 0 0 0 0 0 ...\n $ fullname words      : num [1:576] 0 2 2 1 2 4 2 2 0 2 ...\n $ nums/length fullname: num [1:576] 0 0 0 0 0 0 0 0 0 0 ...\n $ name==username      : num [1:576] 0 0 0 0 0 0 0 0 0 0 ...\n $ description length  : num [1:576] 53 44 0 82 0 81 50 0 71 40 ...\n $ external URL        : num [1:576] 0 0 0 0 0 1 0 0 0 1 ...\n $ private             : num [1:576] 0 0 1 0 1 0 0 0 0 0 ...\n $ #posts              : num [1:576] 32 286 13 679 6 344 16 33 72 213 ...\n $ #followers          : num [1:576] 1000 2740 159 414 151 ...\n $ #follows            : num [1:576] 955 533 98 651 126 ...\n $ fake                : num [1:576] 0 0 0 0 0 0 0 0 0 0 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   `profile pic` = col_double(),\n  ..   `nums/length username` = col_double(),\n  ..   `fullname words` = col_double(),\n  ..   `nums/length fullname` = col_double(),\n  ..   `name==username` = col_double(),\n  ..   `description length` = col_double(),\n  ..   `external URL` = col_double(),\n  ..   private = col_double(),\n  ..   `#posts` = col_double(),\n  ..   `#followers` = col_double(),\n  ..   `#follows` = col_double(),\n  ..   fake = col_double()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt;\nHemos comprobado que todos los valores son del tipo numérico y double.\nanyNA(datos)\n\n[1] FALSE\nPor ultimo comprobamos que no existen valores NA dentro del dataset, lo que nos ayudara en su próximo análisis exploratorio.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Análisis exploratorio de datos.</span>"
    ]
  },
  {
    "objectID": "analisisExploratorio.html#análisis-de-atributos",
    "href": "analisisExploratorio.html#análisis-de-atributos",
    "title": "1  Análisis exploratorio de datos.",
    "section": "1.2 Análisis de atributos",
    "text": "1.2 Análisis de atributos\nUna vez visto un poco por encima la estructura del dataset, vamos a explorar uno a uno los atributos de cada fila, explorando su significado, los valores límite, …\n\n1.2.1 profile pic\nEste es un atributo binario que indica si un usuario tiene foto de perfil. Por lo tanto, solo tenemos 0 o 1.\n\nstr(datos$`profile pic`)\n\n num [1:576] 1 1 1 1 1 1 1 1 1 1 ...\n\nanyNA(datos$`profile pic`)\n\n[1] FALSE\n\n\nVemos que esta columna no contiene ningun NA.\nVamos a visualizar la proporcion de usuarios con foto de perfil:\n\nhist(datos$`profile pic`, breaks = 2, main=\"Fotos de perfil\" )\n\n\n\n\n\n\n\n\nObservamos que más de la mitad de los usuarios tienen foto de perfil.\n\n\n1.2.2 nums/length username\nEste atributo representa el ratio de número de caracteres numéricos en el nombre de usuario respecto a su longitud.\nPor ejemplo: Ant234 -&gt; Ratio 1.\n\nhist(datos$`nums/length username`, main=\"Ratio caracteres num en usuario\" )\n\n\n\n\n\n\n\n\n\n\n1.2.3 fullname words\nEste atributo representa la cantidad de palabras que componen el nombre del usuario.\n\nmax(datos$`fullname words`)\n\n[1] 12\n\n\nObservamos que hay uno o varios usuarios cuyo nombre tiene 12 palabras de longitud, algo que es poco común.\n\nhist(datos$`fullname words`, main=\"Num palabra nombre\" )\n\n\n\n\n\n\n\n\nAnalizando el histograma, vemos que la mayoría de usuarios tiene entre 0 y 1 palabras en su nombre.\n\ncount(filter(datos,`fullname words`==1 | `fullname words`==2))/count(datos)*100\n\n         n\n1 81.59722\n\n\nEn concreto el 81,6% de los datos tienen entre 0 y 1 palabras en su nombre.\n\n\n1.2.4 nums/length fullname\nEste atributo representa el ratio de número de caracteres numéricos en el nombre completo del usuario respecto a su longitud.\n\nhist(datos$`nums/length fullname`, main=\"Ratio caracteres num en nombre\" )\n\n\n\n\n\n\n\n\nObservamos que es bastante inusual que un usuario tenga caracteres en su nombre completo, mientras que, como hemos visto antes, en el nombre de usuario, es más frecuente encontrar caracteres.\n\n\n1.2.5 name==username\nEste atributo es un atributo binario que representa si el usuario tiene el mismo nombre de usuario y nombre completo.\n\nhist(datos$`name==username`, breaks = 2, main=\"Nombre igual a usuario\" )\n\n\n\n\n\n\n\n\nConcluimos que es bastante inusual que un usuario tenga el mismo nombre de usuario y nombre completo.\n\n\n1.2.6 description length\nEste atributo representa la longitud de la descripción del perfil de usuario (en caracteres).\n\nhist(datos$`description length`, main=\"Num carateres de la descripcion\" )\n\n\n\n\n\n\n\n\nPodemos intuir que el máximo de caracteres que ofrece Instagram en su descripción es 150, cuyo límite es alcanzado por pocos usuarios del dataset.\n\nfilter(datos,datos$`description length` ==150) %&gt;% count() %&gt;% summarise(`Num de usuarios`=n)\n\n# A tibble: 1 × 1\n  `Num de usuarios`\n              &lt;int&gt;\n1                 2\n\n\nViendo el histograma, descubrimos que la mayoría de usuarios tienen una descripción con pocos caracteres, pero vamos a calcular la media para poder tener una idea:\n\nmean(datos$`description length`)\n\n[1] 22.62326\n\n\nEncontramos que la media de caracteres en la descripción es relativamente baja, lo que, dependiendo del idioma, puede ser una pequeña frase o algunas palabras. Las descripciones largas son menos frecuentes.\n\n\n1.2.7 external URL\nEste atributo es un atributo binario que representa si el perfil tiene algún enlace externo en él.\n\nhist(datos$`external URL`, breaks = 2, main=\"Enlace en el perfil?\" )\n\n\n\n\n\n\n\n\nLo mas común son los perfiles sin enlaces externos.\n\n\n1.2.8 private\nEste atributo es un atributo binario que representa si el perfil es privado o publico.\n\nhist(datos$`private`, breaks = 2, main=\"Perfil privado?\" )\n\n\n\n\n\n\n\n\nEn este atributo encontramos algo más de igualdad, el número de cuentas privadas es poco más de la mitad del número de cuentas públicas.\n\ndatos %&gt;% mutate(private = ifelse(private==1,\"Privada\",\"Publica\")) %&gt;%  group_by(private) %&gt;% count() %&gt;%  summarise(Numero = sum(n))  \n\n# A tibble: 2 × 2\n  private Numero\n  &lt;chr&gt;    &lt;int&gt;\n1 Privada    220\n2 Publica    356\n\n\n\n\n1.2.9 post\nEste atributo representa el número de publicaciones de la cuenta.\n\nhist(datos$`#posts`,  main=\"Fotos de perfil\" )\n\n\n\n\n\n\n\nmax(datos$`#posts`)\n\n[1] 7389\n\n\nObtenemos un histograma un poco extraño al haber algún valor muy alto de publicaciones, vamos a buscarlo:\n\nmax(datos$`#posts`)\n\n[1] 7389\n\n\nVemos que es un valor bastante inusual o que podría tratarse de alguna cuenta que publique mucho contenido a diario. Vamos a verla:\n\ndatos %&gt;% filter(`#posts`==7389)\n\n# A tibble: 1 × 12\n  `profile pic` `nums/length username` `fullname words` `nums/length fullname`\n          &lt;dbl&gt;                  &lt;dbl&gt;            &lt;dbl&gt;                  &lt;dbl&gt;\n1             1                      0                0                      0\n# ℹ 8 more variables: `name==username` &lt;dbl&gt;, `description length` &lt;dbl&gt;,\n#   `external URL` &lt;dbl&gt;, private &lt;dbl&gt;, `#posts` &lt;dbl&gt;, `#followers` &lt;dbl&gt;,\n#   `#follows` &lt;dbl&gt;, fake &lt;dbl&gt;\n\n\nComo dato, la cuenta de Dwayne Johnson, ex-luchador de la WWE y exitoso actor de Hollywood, tiene alrededor de 7800 publicaciones, por lo que dicho valor puede ser debido a la cuenta de algún famoso.\nVamos a volver a dibujar el histograma pero con un umbral un poco más razonable:\n\npost_filtrados &lt;- datos %&gt;% select(`#posts`)%&gt;% filter(`#posts` &lt;500)\nhist(post_filtrados$`#posts`)\n\n\n\n\n\n\n\n\nAhora ya podemos extraer información más fácilmente, como que la mayoría de usuarios tiene menos de 50 publicaciones. Vamos a verlo en más detalle:\n\npost_filtrados &lt;- datos %&gt;% select(`#posts`)%&gt;% filter(`#posts` &lt;50)\nhist(post_filtrados$`#posts`)\n\n\n\n\n\n\n\n\nObservamos que hay un gran número de usuarios con menos de 5 publicaciones. Vamos a ver cuántos de ellos tienen 0 publicaciones y a calcular la media total:\n\ndatos %&gt;% filter(`#posts`==0) %&gt;% count()\n\n# A tibble: 1 × 1\n      n\n  &lt;int&gt;\n1   157\n\nmean(datos$`#posts`)\n\n[1] 107.4896\n\n\nAunque como antes hemos visto que hay usuarios con un gran número de publicaciones, esta media puede no ser muy significativa.\nVamos a analizar entonces sus cuartiles y mediana:\n\nsummary(datos$`#posts`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    0.0     0.0     9.0   107.5    81.5  7389.0 \n\n\n\n\n1.2.10 followers\nEste atributo representa el numero de seguidores de la cuenta.\n\nhist(datos$`#followers`, main=\"Numero de seguidores\" )\n\n\n\n\n\n\n\nmax(datos$`#followers`)\n\n[1] 15338538\n\n\nComo en el atributo anterior, este histograma no tiene sentido porque hay algún valor muy alto.\n\nmax(datos$`#followers`)\n\n[1] 15338538\n\n\nDicho valor solo tiene sentido que sea debido a una cuenta de alguna celebridad. Vamos a comprobar si es el mismo que tiene similitud con el valor anómalo de publicaciones encontrado anteriormente:\n\ndatos %&gt;% filter (`#followers`==max(`#followers`)) %&gt;% select(`#posts`)\n\n# A tibble: 1 × 1\n  `#posts`\n     &lt;dbl&gt;\n1      148\n\n\nAunque podría ser la cuenta de una celebridad, vemos que tiene un número de publicaciones relativamente normal, comparado con el valor de 7389 publicaciones que obtuvimos anteriormente.\nVamos a volver a hacer el histograma con un nuevo umbral más bajo:\n\nfollowers_filtrados &lt;- datos %&gt;% select(`#followers`)%&gt;% filter(`#followers` &lt;1000)\nhist(followers_filtrados$`#followers`)\n\n\n\n\n\n\n\n\nObservamos que la mayoría de usuarios no tienen un gran número de seguidores, en concreto, menos de 100.\nVamos a verlo:\n\nfollowers_filtrados &lt;- datos %&gt;% select(`#followers`)%&gt;% filter(`#followers` &lt;100)\nhist(followers_filtrados$`#followers`)\n\n\n\n\n\n\n\n\nVemos que en este intervalo, las frecuencias están más repartidas. Aunque resulta curioso que una gran cantidad de usuarios no llegue a los 50 seguidores.\nViendo que hay algunos usuarios con un gran número de seguidores, no tiene sentido tomar el valor de la mediana como referencia ya que esta no es significativa en este caso. Por lo tanto, vamos a analizar los cuartiles y la mediana en su lugar.\n\nmean(datos$`#followers`)\n\n[1] 85307.24\n\nsummary(datos$`#followers`)\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n       0       39      150    85307      716 15338538 \n\n\nSabiendo que la mediana divide al 50% de los datos, dicho valor es más significativo que la media.\n\n\n1.2.11 follows\nEste atributo representa el numero de usuarios seguidos por la cuenta.\n\nhist(datos$`#follows`, main=\"Numero de seguidos\" )\n\n\n\n\n\n\n\nmax(datos$`#follows`)\n\n[1] 7500\n\n\nAl igual que en los dos anteriores, los valores máximos hacen que nuestro histograma no sea muy entendible, vamos a estudiarlo:\n\nmax(datos$`#follows`)\n\n[1] 7500\n\n\nDicho valor corresponde con el valor máximo de cuentas que Instagram permite a los usuarios seguir para reducir el spam. Por lo tanto, las cuentas que siguen a un gran número de personas se pueden llegar a asociar a spammers. Vamos a ver cuántas cuentas están en este límite:\n\ncount(filter(datos,datos$`#follows`==7500))\n\n# A tibble: 1 × 1\n      n\n  &lt;int&gt;\n1     2\n\n\nAhora, para poder hacernos una mejor idea, vamos a volver a dibujar el histograma con un nuevo umbral reducido.\n\nfollows_filtrados &lt;- datos %&gt;% select(`#follows`)%&gt;% filter(`#follows` &lt;1000)\nhist(follows_filtrados$`#follows`)\n\n\n\n\n\n\n\n\nObservamos que más de la mitad de usuarios no sigue a muchas otras cuentas, en concreto, menos de 100.\nVamos a verlo:\n\nfollows_filtrados &lt;- datos %&gt;% select(`#follows`)%&gt;% filter(`#follows` &lt;100)\nhist(follows_filtrados$`#follows`)\n\n\n\n\n\n\n\n\nVemos que en este intervalo, las frecuencias están más repartidas.\nViendo que hay algunos usuarios con un gran número de cuentas seguidas, no tiene sentido tomar el valor de la mediana como referencia ya que esta no es significativa en este caso. Por lo tanto, vamos a analizar los cuartiles y la mediana en su lugar.\n\nsummary(datos$`#follows`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    0.0    57.5   229.5   508.4   589.5  7500.0 \n\n\nAhora, con estos valores, ya podemos analizarlo un poco mejor y darnos cuenta de que el 50% de los usuarios no sigue a más de 229 cuentas.\n\n\n1.2.12 fake\nPor ultimo, este atributo es un atributo binario que representa si el perfil es verdadero o es un spammer.\n\nhist(datos$fake, breaks = 2, main=\"Fake o no\" )\n\n\n\n\n\n\n\n\nObservamos que nuestro DataSet tiene un 50% de cuentas falsas y otro 50% de cuentas verdaderas.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Análisis exploratorio de datos.</span>"
    ]
  },
  {
    "objectID": "analisisExploratorio.html#herramienta-de-dataexplorer",
    "href": "analisisExploratorio.html#herramienta-de-dataexplorer",
    "title": "1  Análisis exploratorio de datos.",
    "section": "1.3 Herramienta de DataExplorer",
    "text": "1.3 Herramienta de DataExplorer\n\nlibrary(DataExplorer)\n\nWarning: package 'DataExplorer' was built under R version 4.3.3\n\n#create_report(datos)\n\n\nDataExplorer: Automate Data Exploration and Treatment\n\nAutomated data exploration process for analytic tasks and predictive modeling, so that users could focus on understanding data and extracting insights. The package scans and analyzes each variable, and visualizes them with typical graphical techniques. Common data processing methods are also available to treat and format data.\n\n\nLa librería DataExplorer es una herramienta diseñada para simplificar y acelerar el proceso de exploración y análisis de datos. Proporciona funciones que permiten generar rápidamente resúmenes estadísticos, visualizaciones y diagnósticos de los datos.\nAlgunas de sus características cson la capacidad de generar perfiles de datos detallados, identificar valores atípicos, analizar la distribución de variables y explorar relaciones entre variables.\nPodemos simplificar el proceso realizado anteriormente utilizando este paquete.\n\n1.3.1 Funciones interesantes\n\n1.3.1.1 introduce\nGenera un pequeño reporte con los datos mas relevantes como el numero de columnas, el tamano del datset, …\n\nintroduce(datos)\n\n# A tibble: 1 × 9\n   rows columns discrete_columns continuous_columns all_missing_columns\n  &lt;int&gt;   &lt;int&gt;            &lt;int&gt;              &lt;int&gt;               &lt;int&gt;\n1   576      12                0                 12                   0\n# ℹ 4 more variables: total_missing_values &lt;int&gt;, complete_rows &lt;int&gt;,\n#   total_observations &lt;int&gt;, memory_usage &lt;dbl&gt;\n\nplot_intro(datos)\n\n\n\n\n\n\n\n\n\n\n1.3.1.2 plot_histogram\nEsta función nos muestra todos los histogramas de las variables/columnas.\n\nplot_histogram(datos)\n\n\n\n\n\n\n\n\n\n\n1.3.1.3 plot_qq\nEste comando genera un gráfico de cuantiles-cuantiles, el cual es una forma de visualizar la desviación de una distribución de probabilidad específica.\n\nplot_qq(datos)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1.3.1.4 create_report\nEste comando realiza las medidas mencionadas anteriormente y muchas otras que son útiles (como el análisis de componentes principales) para el análisis exploratorio y genera como salida un reporte completo de nuestros datos.\n\n#create_report(datos)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Análisis exploratorio de datos.</span>"
    ]
  },
  {
    "objectID": "visualizacionDatos.html",
    "href": "visualizacionDatos.html",
    "title": "2  Visualización de los Datos",
    "section": "",
    "text": "2.1 Pre-procesado\nPara hacer este trabajo más fácil, vamos a realizar un preprocesado de los datos primero. Vamos a convertir todos los atributos que son discretos a factores.\ndatos_refinados &lt;- datos\ncolumnas_binarias = c(\"profile pic\",\"name==username\",\"external URL\",\"fake\",\"private\")\nfor (columna in columnas_binarias) {\n  datos_refinados[[columna]] &lt;-  factor(datos_refinados[[columna]], labels = c(\"No\", \"Si\"))\n}\nNuestros atributos discretos son binarios, solo tienen o bien Sí o No. Vamos a emplear ahora los gráficos para poder encontrar alguna relación entre las variables y, sobre todo, lo que más nos interesa, si alguna tiene relación con las cuentas de spam.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Visualización de los Datos</span>"
    ]
  },
  {
    "objectID": "visualizacionDatos.html#comparación-de-la-cantidad-de-publicaciones-entre-cuentas-privadas-y-públicas",
    "href": "visualizacionDatos.html#comparación-de-la-cantidad-de-publicaciones-entre-cuentas-privadas-y-públicas",
    "title": "2  Visualización de los Datos",
    "section": "2.2 Comparación de la cantidad de publicaciones entre cuentas privadas y públicas",
    "text": "2.2 Comparación de la cantidad de publicaciones entre cuentas privadas y públicas\nPara ver cómo se comportan ambos tipos de usuarios, vamos a empezar analizando el número de publicaciones entre los usuarios con cuentas públicas y con cuentas privadas. Para ello, vamos a ver las densidades utilizando geom_density:\n\nposts_filtrados &lt;- datos_refinados %&gt;%  filter(`#posts` &lt;100)\n\nggplot(data = posts_filtrados, aes( x = `#posts`,fill = private)) +\n  geom_density(alpha = 0.5) +\n  labs(title = \"Comparación de publicaciones entre cuentas privadas y públicas\",\n       x = \"Numero de publicacion\",\n       y = \"Densidad\") +\n  scale_fill_manual(values = c(\"lightgreen\", \"lightcoral\"))\n\n\n\n\n\n\n\n\nVemos que en ambos casos, nuestra gráfica es similar, lo que sugiere que el número de publicaciones no depende de si la cuenta es privada o pública.\nSin embargo, lo que realmente nos interesa es encontrar relaciones para intentar determinar si una cuenta es de un spammer o de una persona real. Por lo tanto, vamos a centrarnos en comparar los atributos con el atributo “spam”.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Visualización de los Datos</span>"
    ]
  },
  {
    "objectID": "visualizacionDatos.html#relación-entre-visibilidad-del-perfil-y-cuentas-fake",
    "href": "visualizacionDatos.html#relación-entre-visibilidad-del-perfil-y-cuentas-fake",
    "title": "2  Visualización de los Datos",
    "section": "2.3 Relación entre visibilidad del perfil y cuentas fake",
    "text": "2.3 Relación entre visibilidad del perfil y cuentas fake\nComo nos interesa buscar las cuentas de spam, vamos a ver si la visibilidad del perfil (cuenta privada o pública) tiene algo que ver:\n\nggplot(datos_refinados, aes(x = `fake`, y = `private`)) +   \n  geom_count(color = \"blue\", alpha = 0.6) +   \n  scale_size_area()+   \n  labs(title = \"Relación entre visibilidad del perfil y si es spam\",        \n       x = \"Cuenta fake\",        \n       y = \"Cuenta privada\")+   \n  theme_minimal() \n\n\n\n\n\n\n\n\nUtilizando geom_count con dos variables discretas, en este caso si un perfil es privado o no y si un perfil es falso o no, no podemos extraer mucha información relevante ya que vemos que hay aproximadamente un número similar de cada combinación.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Visualización de los Datos</span>"
    ]
  },
  {
    "objectID": "visualizacionDatos.html#relación-entre-tener-foto-de-perfil-y-ser-cuenta-falsa.",
    "href": "visualizacionDatos.html#relación-entre-tener-foto-de-perfil-y-ser-cuenta-falsa.",
    "title": "2  Visualización de los Datos",
    "section": "2.4 Relación entre tener foto de perfil y ser cuenta falsa.",
    "text": "2.4 Relación entre tener foto de perfil y ser cuenta falsa.\nAl igual que antes, vamos a comprobar dos variables discretas, por lo que el aspecto del gráfico será diferente. Vamos a comprobar si tener o no foto de perfil tiene algo de relación con ser un spammer.\n\nggplot(datos_refinados, aes(x = `fake`, y = `profile pic`)) +   \n  geom_jitter(color = \"blue\", alpha = 0.6) +   \n  scale_size_area()+   \n  labs(title = \"Relación entre tener foto de perfil y si es spam\",        \n       x = \"Cuenta fake\",        \n       y = \"Foto de perfil\")+   \n  theme_minimal() \n\n\n\n\n\n\n\n\nHemos obtenido un resultado interesante, donde vemos que las cuentas reales, todas menos 2, tienen foto de perfil puesta, mientras que las cuentas falsas tienen más o menos un mismo número con foto de perfil y sin foto de perfil. Estos datos, combinados con otros que vamos a obtener más adelante, nos pueden ayudar a diferenciar cuentas reales de falsas.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Visualización de los Datos</span>"
    ]
  },
  {
    "objectID": "visualizacionDatos.html#relación-entre-número-de-publicaciones-y-cuentas-falsas.",
    "href": "visualizacionDatos.html#relación-entre-número-de-publicaciones-y-cuentas-falsas.",
    "title": "2  Visualización de los Datos",
    "section": "2.5 Relación entre número de publicaciones y cuentas falsas.",
    "text": "2.5 Relación entre número de publicaciones y cuentas falsas.\nPodemos suponer una posible hipótesis en la que los usuarios spammers, cuya tarea puede ser solo generar comentarios o likes, van a tener cuentas con menos número de publicaciones que una cuenta de una persona verdadera. Vamos a visualizar esta idea:\n\nposts_filtrados &lt;- datos_refinados %&gt;%  filter(`#posts` &lt;100)\nggplot(posts_filtrados, aes(x = fake, y = `#posts`)) +\n  geom_violin(fill = \"skyblue\", color = \"black\") \n\n\n\n\n\n\n\n\nObservamos que teníamos razón. Después de eliminar aquellas cuentas con muchos posts, vemos que las cuentas falsas suelen tener un número reducido de publicaciones, mientras que las cuentas normales suelen tener una distribución más uniforme.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Visualización de los Datos</span>"
    ]
  },
  {
    "objectID": "visualizacionDatos.html#análisis-de-número-de-seguidores.",
    "href": "visualizacionDatos.html#análisis-de-número-de-seguidores.",
    "title": "2  Visualización de los Datos",
    "section": "2.6 Análisis de número de seguidores.",
    "text": "2.6 Análisis de número de seguidores.\nUno de los atributos más relevantes puede ser el número de seguidores. Por lo tanto, necesitamos analizarlo en profundidad. Vamos a comenzar con el número de seguidores.\nPrimero, como en el análisis exploratorio observamos que había algunas cuentas con muchos seguidores pero que no representaban un número importante, vamos a eliminar esas escasas cuentas con un número alto de seguidores con el fin de que los gráficos sean más entendibles.\n\nfollowers_filtrados &lt;- datos_refinados %&gt;% filter(`#followers` &lt;1500)\n\nggplot(followers_filtrados, aes(x = `#followers`)) +\n  geom_histogram(binwidth = 10, color = 'black') +\n    labs(title = \"Histograma de seguidores\",\n       x = \"Cantidad de Seguidores\",\n       y = \"Frecuencias\")\n\n\n\n\n\n\n\n\nVemos que la mayoría se concentra en menos de 250 seguidores.\nVamos a utilizar una gráfica de frecuencia para ver cómo son nuestros datos con menos de 250 seguidores.\n\nfollowers_filtrados &lt;- datos_refinados %&gt;%  filter(`#followers` &lt;250)\n\nggplot(followers_filtrados, aes(x = `#followers`)) +\n  geom_freqpoly(color = \"blue\", binwidth = 5) +\n  labs(title = \"Distribución de la Cantidad de Seguidores\",\n       x = \"Cantidad de Seguidores\",\n       y = \"Frecuencia\") \n\n\n\n\n\n\n\n\nLa mayor concentración se encuentra en menos de 100 seguidores y la frecuencia disminuye a medida que aumenta el número de seguidores.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Visualización de los Datos</span>"
    ]
  },
  {
    "objectID": "visualizacionDatos.html#comparación-del-número-de-seguidores-entre-cuentas-reales-y-falsas.",
    "href": "visualizacionDatos.html#comparación-del-número-de-seguidores-entre-cuentas-reales-y-falsas.",
    "title": "2  Visualización de los Datos",
    "section": "2.7 Comparación del número de seguidores entre cuentas reales y falsas.",
    "text": "2.7 Comparación del número de seguidores entre cuentas reales y falsas.\nComo nuestro principal objetivo es poder encontrar características similares que tengan las cuentas falsas para poder identificarlas fácilmente, vamos a visualizar este atributo en relación con el número de seguidores. Además, añadiremos las medias para obtener más información.\n\nmean_values &lt;- followers_filtrados %&gt;% \n  group_by(fake) %&gt;% \n  summarize(mean_followerss = mean(`#followers`))\n\nggplot(data = followers_filtrados, aes( x = `#followers`,fill = `fake`)) +   geom_density(alpha = 0.5) +   \n  labs(title = \"Comparación de seguidores entre cuentas reales y falsas\",        \n       x = \"Numero de seguidores\",        \n       y = \"Densidad\") +   \n  scale_fill_manual(values = c(\"lightgreen\", \"lightcoral\"))+\n  geom_vline(data = mean_values, aes(xintercept = mean_followerss, color = fake), linetype = \"dashed\", size = 1) +\n   geom_text(data = mean_values, aes(x = mean_followerss, y = 0, label = round(mean_followerss, 1), color = fake),\n            vjust = -0.5, hjust = -0.1, size = 4, fontface = \"bold\") +\n  scale_color_manual(values = c(\"lightgreen\", \"lightcoral\"), name = \"Media\")\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\nAquí obtenemos información más interesante. Podemos observar que las cuentas falsas tienden a tener un menor número de seguidores, mientras que las cuentas reales, aunque no tienen muchos seguidores, suelen mantenerse en un intervalo entre 50 y 250. Esta información nos puede ser de importancia para los cálculos futuros.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Visualización de los Datos</span>"
    ]
  },
  {
    "objectID": "visualizacionDatos.html#análisis-de-número-de-seguidos.",
    "href": "visualizacionDatos.html#análisis-de-número-de-seguidos.",
    "title": "2  Visualización de los Datos",
    "section": "2.8 Análisis de número de seguidos.",
    "text": "2.8 Análisis de número de seguidos.\nAhora que hemos explorado cómo se comporta el número de seguidores según el tipo de cuentas a través de varios gráficos, vamos a continuar con el número de seguidos.\nPrimero, como en el análisis exploratorio observamos que había algunas cuentas con muchos seguidos, pero que no representaban un número importante, vamos a eliminar esas escasas cuentas con un número alto de seguidos con el fin de que los gráficos sean más entendibles.\n\nfollows_filtrados &lt;- datos_refinados %&gt;%  filter(`#follows` &lt;1000)  \nggplot(follows_filtrados, aes(x = `#follows`)) +   geom_histogram(binwidth = 10, color = 'black') +     \n  labs(title = \"Histograma de seguidos\",        \n       x = \"Cantidad de Seguidos\",        \n       y = \"Frecuencias\")\n\n\n\n\n\n\n\n\nVemos que la mayoría se concentra en menos de 250 seguidos.\nVamos a utilizar una gráfica de frecuencia para ver cómo son nuestros datos con menos de 250 seguidos.\n\nfollows_filtrados &lt;- datos_refinados %&gt;%  filter(`#follows` &lt;250)   \nggplot(follows_filtrados, aes(x = `#follows`)) +   \n  geom_freqpoly(color = \"blue\", binwidth = 5) +   \n  labs(title = \"Distribución de la Cantidad de Seguidos\",        \n       x = \"Cantidad de Seguidos\",        \n       y = \"Frecuencia\")  \n\n\n\n\n\n\n\n\nLa mayor concentración se encuentra en menos de 100 seguidos y la frecuencia disminuye a medida que aumenta el número de seguidos.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Visualización de los Datos</span>"
    ]
  },
  {
    "objectID": "visualizacionDatos.html#comparación-del-número-de-seguidos-entre-cuentas-reales-y-falsas.",
    "href": "visualizacionDatos.html#comparación-del-número-de-seguidos-entre-cuentas-reales-y-falsas.",
    "title": "2  Visualización de los Datos",
    "section": "2.9 Comparación del número de seguidos entre cuentas reales y falsas.",
    "text": "2.9 Comparación del número de seguidos entre cuentas reales y falsas.\nComo nuestro principal objetivo es poder encontrar características similares que tengan las cuentas falsas para poder identificarlas fácilmente, vamos a visualizar este atributo. Además, añadiremos las medias para obtener más información.\n\nfollows_filtrados &lt;- datos_refinados %&gt;%  filter(`#follows` &lt;550)  \n\nmean_values &lt;- follows_filtrados %&gt;% \n  group_by(fake) %&gt;% \n  summarize(mean_follows = mean(`#follows`))\n\nggplot(data = follows_filtrados, aes( x = `#follows`,fill = `fake`)) +   geom_density(alpha = 0.5) +   \n  labs(title = \"Comparación de seguidos entre cuentas reales y falsas\",        \n       x = \"Numero de seguidos\",        \n       y = \"Densidad\") +   \n  scale_fill_manual(values = c(\"lightgreen\", \"lightcoral\"))+\n  geom_vline(data = mean_values, aes(xintercept = mean_follows, color = fake), linetype = \"dashed\", size = 1) +\n   geom_text(data = mean_values, aes(x = mean_follows, y = 0, label = round(mean_follows, 1), color = fake),\n            vjust = -0.5, hjust = -0.1, size = 4, fontface = \"bold\") +\n  scale_color_manual(values = c(\"lightgreen\", \"lightcoral\"), name = \"Media\")\n\n\n\n\n\n\n\n\nAquí, al igual que con los seguidores, obtenemos información más interesante. Podemos observar que las cuentas falsas tienden a tener un menor número de seguidores, pero no tan cercano a 0, mientras que las cuentas reales suelen tener un número más repartido de seguidos. Esta información nos puede ser de importancia para los cálculos futuros.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Visualización de los Datos</span>"
    ]
  },
  {
    "objectID": "visualizacionDatos.html#relación-entre-número-de-seguidores-y-número-de-seguidos.",
    "href": "visualizacionDatos.html#relación-entre-número-de-seguidores-y-número-de-seguidos.",
    "title": "2  Visualización de los Datos",
    "section": "2.10 Relación entre número de seguidores y número de seguidos.",
    "text": "2.10 Relación entre número de seguidores y número de seguidos.\nAhora que hemos visto ambas variables por separado, vamos a utilizar gráficos de puntos o dispersión para ver varias variables juntas e intentar encontrar alguna relación o característica en estas.\n\nfollowers_filtrados &lt;- datos_refinados %&gt;%  filter(`#followers` &lt;5000)\n\n\nggplot(data = followers_filtrados, aes(x = `#follows`, y = `#followers`)) +\n  geom_point(shape = 4, size = 3) +\n  labs(title = \"Seguidores vs. Seguidos\",\n       x = \"Cantidad de Seguidos\",\n       y = \"Cantidad de Seguidores\")+\n  scale_fill_manual(values = c(\"skyblue\", \"lightcoral\"))\n\n\n\n\n\n\n\n\nViendo este gráfico, solo podemos observar que casi todo se concentra en un número reducido tanto de seguidos como de seguidores.\nAunque dicha información no nos sea de mucha utilidad, vamos a añadir el parámetro para diferenciar cuentas falsas y reales. Podemos pensar que los seguidores y los seguidos tienen alguna relación con los usuarios que son falsos. Vamos a refinar un poco el DataSet eliminando los usuarios que tenían muchos seguidores. Vamos a investigar:\n\nfollowers_filtrados &lt;- datos_refinados %&gt;%  filter(`#followers` &lt;5000)\n\n\nggplot(data = followers_filtrados, aes(x = `#follows`, y = `#followers`, fill =fake)) +\n  geom_point(shape = 21, size = 3) +\n  labs(title = \"Seguidores vs. Seguidos con Relleno según 'Fake'\",\n       x = \"Cantidad de Seguidos\",\n       y = \"Cantidad de Seguidores\",\n       fill = \"Fake\") +\n  scale_fill_manual(values = c(\"skyblue\", \"lightcoral\"), labels = c(\"Real\", \"Falso\"))\n\n\n\n\n\n\n\n\nAquí podemos ver que hay una cierta tendencia. Las cuentas falsas suelen tener más cuentas seguidas que seguidores. Esto puede ser debido a que al ser cuentas generadas automáticamente, seguir a otras cuentas es una tarea que se puede automatizar, mientras que conseguir seguidores es algo más complicado y requiere de una acción activa por parte de otra persona para seguir la cuenta. Vamos a utilizar el atributo de geom_smooth para poder visualizar una posible tendencia.\n\nggplot(data = followers_filtrados, aes(x = `#follows`, y = `#followers`, fill = fake)) +\n  geom_point(shape = 21, size = 3) +\n   geom_smooth(method = \"loess\")+\n  labs(title = \"Seguidores vs. Seguidos con Relleno según 'Fake'\",\n       x = \"Cantidad de Seguidos\",\n       y = \"Cantidad de Seguidores\",\n       fill = \"Fake\") +\n  scale_fill_manual(values = c(\"skyblue\", \"lightcoral\") )\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nAhora podemos reafirmar la idea de esa posible tendencia gracias a este gráfico. Vemos que los puntos rojos (falsos) se ajustan a la línea roja. Sin embargo, las cuentas verdaderas tienen una tendencia más dispersa.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Visualización de los Datos</span>"
    ]
  },
  {
    "objectID": "visualizacionDatos.html#importancia-de-la-presencia-de-caracteres-numéricos-en-el-usuario-y-nombre.",
    "href": "visualizacionDatos.html#importancia-de-la-presencia-de-caracteres-numéricos-en-el-usuario-y-nombre.",
    "title": "2  Visualización de los Datos",
    "section": "2.11 Importancia de la presencia de caracteres numéricos en el usuario y nombre.",
    "text": "2.11 Importancia de la presencia de caracteres numéricos en el usuario y nombre.\nEncontrar caracteres numéricos en el nombre de usuario y en los nombres completos es algo que, a primera vista, no podemos asociar con ningún tipo de cuenta. Por lo tanto, nos vemos en la necesidad de analizarlo más en profundidad.\n\n#Tenemos que duplicar los datos para poder poner una grafica al lado de otra\n#Pivot_longer elimina las columnas conbinandola en dos columnas con el nombre y el valor\nlibrary(tidyr)\n\n\nAttaching package: 'tidyr'\n\n\nThe following object is masked from 'package:magrittr':\n\n    extract\n\ndatos_comb  &lt;-  datos_refinados %&gt;% \n  pivot_longer(cols = c(`nums/length fullname`, `nums/length username`), \n               names_to = \"variable\", \n               values_to = \"value\")\n\nggplot(data = datos_comb, aes(x = value, fill = fake)) +\n  geom_density(alpha = 0.5, adjust = 1) +\n  labs(title = \"Proporción de Números en fullname y username para Perfiles Reales y Falsos\",\n       x = \"Proporción de Números\",\n       y = \"Densidad\",\n       fill = \"Perfil Falso\") +\n  scale_fill_manual(values = c(\"lightgreen\", \"lightcoral\"), labels = c(\"No\", \"Sí\")) +  facet_wrap(~variable, scales = \"free_x\", labeller = as_labeller(c(`nums/length fullname` = \"Nombre Completo\", `nums/length username` = \"Nombre de Usuario\")))\n\n\n\n\n\n\n\n\nPodemos ver que realmente hay una relación entre la presencia de caracteres numéricos en el nombre y el nombre de usuario con respecto a si la cuenta es verdadera o spammer.\nPodemos concluir que las cuentas falsas suelen contener un mayor número de caracteres numéricos en el nombre o nombre de usuario que las cuentas verdaderas.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Visualización de los Datos</span>"
    ]
  },
  {
    "objectID": "visualizacionDatos.html#relación-entre-longitud-de-la-descripción-para-perfiles-reales-y-perfiles-falsos.",
    "href": "visualizacionDatos.html#relación-entre-longitud-de-la-descripción-para-perfiles-reales-y-perfiles-falsos.",
    "title": "2  Visualización de los Datos",
    "section": "2.12 Relación entre longitud de la descripción para perfiles reales y perfiles falsos.",
    "text": "2.12 Relación entre longitud de la descripción para perfiles reales y perfiles falsos.\nPor último, otra posible hipótesis podría ser que los usuarios falsos tienen descripciones vacías o menos elaboradas que las de los perfiles reales.\n\nggplot(data = datos_refinados, aes(x = `description length`, fill = fake)) +\n  geom_density(alpha = 0.5) +\n  labs(title = \"Densidad de Longitud de Descripción para Perfiles Reales y Falsos\",\n       x = \"Longitud de la Descripción\",\n       y = \"Densidad\") +\n  scale_fill_manual(values = c(\"lightgreen\", \"lightcoral\"))\n\n\n\n\n\n\n\n\nY podemos comprobar que dicha idea era cierta. Los perfiles falsos suelen tener un número reducido de caracteres en su descripción, mientras que los perfiles reales están más repartidos.\nVamos a visualizar las medias:\n\nmean_values &lt;- datos_refinados %&gt;% \n  group_by(fake) %&gt;% \n  summarize(mean_desc_length = mean(`description length`))\n\nggplot(data = datos_refinados, aes(x = `description length`, fill =fake)) +\n  geom_density(alpha = 0.5) +\n  labs(title = \"Densidad de Longitud de Descripción para Perfiles Reales y Falsos\",\n       x = \"Longitud de la Descripción\",\n       y = \"Densidad\",\n       fill = \"Perfil Falso\") +\n  scale_fill_manual(values = c(\"lightgreen\", \"lightcoral\"))+\n  geom_vline(data = mean_values, aes(xintercept = mean_desc_length, color = fake), linetype = \"dashed\", size = 1) +\n  scale_color_manual(values = c(\"lightgreen\", \"lightcoral\"), name = \"Media\")",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Visualización de los Datos</span>"
    ]
  },
  {
    "objectID": "visualizacionDatos.html#conclusiones",
    "href": "visualizacionDatos.html#conclusiones",
    "title": "2  Visualización de los Datos",
    "section": "2.13 Conclusiones:",
    "text": "2.13 Conclusiones:\n\nLas cuentas falsas tienden a tener un menor número de seguidores y un mayor número de seguidos.\nLas cuentas reales tienen descripciones con longitudes más largas en comparación con las cuentas falsas.\nLas cuentas falsas tienen una mayor cantidad de caracteres numéricos en el nombre completo y nombre de usuario en comparación con las cuentas reales.\nLas cuentas reales suelen tener foto de perfil, mientras que las cuentas falsas pueden carecer de ella en muchos casos.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Visualización de los Datos</span>"
    ]
  },
  {
    "objectID": "reglasAsociacion.html",
    "href": "reglasAsociacion.html",
    "title": "3  Reglas de asociación",
    "section": "",
    "text": "3.1 Características importantes:",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reglas de asociación</span>"
    ]
  },
  {
    "objectID": "reglasAsociacion.html#características-importantes",
    "href": "reglasAsociacion.html#características-importantes",
    "title": "3  Reglas de asociación",
    "section": "",
    "text": "3.1.1 Medidas relevantes\nPara evaluar la calidad y relevancia de las reglas de asociación, utilizaremos las siguientes medidas:\n\nSoporte (Support): Mide la proporción de cuentas en el dataset que contienen ambos conjuntos de características A y B. Un alto soporte indica que la regla se aplica a una gran proporción del dataset, lo que sugiere que la combinación de características es común y relevante.\nConfianza (Confidence): Mide cuán frecuentemente las características en B aparecen en las cuentas que contienen A. Una mayor confianza indica una mayor fiabilidad de que la presencia de las características en A implicará la presencia de las características en B.\nElevación (Lift): Mide la relación entre la aparición conjunta de A y B y la aparición esperada de A y B si fueran independientes. Una elevación alta (mayor que 1) indica que la presencia de A incrementa significativamente la probabilidad de que B ocurra, lo que sugiere una fuerte asociación entre las características.\n\n\n\n3.1.2 Algoritmo Apriori\nUtilizaremos el algoritmo Apriori para obtener reglas a partir de nuestros datos. Este algoritmo se basa en la propiedad de que cualquier subconjunto de un conjunto frecuente también debe ser frecuente. Itera a través de los conjuntos de características, incrementando su tamaño en cada iteración y manteniendo solo los conjuntos que cumplen con un umbral mínimo de soporte.\n\n\n3.1.3 Reglas\nLas reglas de asociación consisten en implicaciones del tipo “Si A entonces B”, donde A y B son conjuntos de características o comportamientos de las cuentas. Por ejemplo, una regla podría ser “Si una cuenta tiene un número alto de cuentas seguidas y no tiene foto de perfil, entonces es probable que sea una cuenta falsa”.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reglas de asociación</span>"
    ]
  },
  {
    "objectID": "reglasAsociacion.html#carga-de-datos",
    "href": "reglasAsociacion.html#carga-de-datos",
    "title": "3  Reglas de asociación",
    "section": "3.2 Carga de datos:",
    "text": "3.2 Carga de datos:\nVamos a cargar las librerías necesarias y nuestro dataset.\n\nlibrary(arules)\n\nLoading required package: Matrix\n\n\n\nAttaching package: 'arules'\n\n\nThe following objects are masked from 'package:base':\n\n    abbreviate, write\n\nlibrary(arulesViz)\n\nWarning: package 'arulesViz' was built under R version 4.3.3\n\nlibrary(readr)\ndatos &lt;- read_csv(\"Data/train.csv\") \n\nRows: 576 Columns: 12\n\n\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (12): profile pic, nums/length username, fullname words, nums/length ful...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reglas de asociación</span>"
    ]
  },
  {
    "objectID": "reglasAsociacion.html#discretizar-datos",
    "href": "reglasAsociacion.html#discretizar-datos",
    "title": "3  Reglas de asociación",
    "section": "3.3 Discretizar datos",
    "text": "3.3 Discretizar datos\nPuesto que el algoritmo de apriori necesita que el conjunto de datos sea binario o discreto.\nExisten varias formas de discretizar datos, pero el objetivo principal es convertir las características continuas en valores discretos que representen de manera efectiva la información subyacente. Algunas técnicas comunes de discretización incluyen la binarización, la división en intervalos fijos o basados en cuantiles.\nTras haber realizado el previo análisis exploratorio podemos definir intervalos personalizados para cada variable, para ello usaremos las funciones ordered y cut. Además, las variables que son binarias como “fake”, vamos a ponerles “Si” o “No” para poder comprenderlas mejor.\n\ndatos_refinados &lt;- datos\n\ncolumnas_binarias = c(\"profile pic\",\"name==username\",\"external URL\",\"fake\",\"private\")\n\nfor (columna in columnas_binarias) {\n  datos_refinados[[columna]] &lt;-  factor(datos_refinados[[columna]], labels = c(\"No\", \"Si\"))\n}\n\n\n# Discretización de la columna #posts\ndatos_refinados$`#posts` &lt;- ordered(cut(datos_refinados$`#posts`, \n                                 breaks = c(0,1, 5, 10, 50, Inf), \n                                 labels = c(\"muy bajo\",\"medio\", \"alto\", \"muy alto\", \"extremadamente alto\"),include.lowest = TRUE))\n\n# Discretización de la columna #followers\ndatos_refinados$`#followers` &lt;- ordered(cut(datos_refinados$`#followers`, \n                                     breaks = c(0, 10, 60, 200, Inf), \n                                     labels = c(\"bajo\", \"medio\", \"alto\", \"muy alto\"),include.lowest = TRUE))\n\n# Discretización de la columna #follows\ndatos_refinados$`#follows` &lt;- ordered(cut(datos_refinados$`#follows`, \n                                   breaks = c(0, 10, 60, 200, Inf), \n                                   labels = c(\"bajo\", \"medio\", \"alto\", \"muy alto\"),include.lowest = TRUE))\n\n# Discretización de la columna nums/length username\ndatos_refinados$`nums/length username` &lt;- ordered(cut(datos_refinados$`nums/length username`,\n                                                      breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1),\n                                                      labels = c(\"muy bajo\", \"bajo\", \"medio\", \"alto\", \"muy alto\"),\n                                                      include.lowest = TRUE))\n\n# Discretización de la columna nums/length fullname\ndatos_refinados$`nums/length fullname` &lt;- ordered(cut(datos_refinados$`nums/length fullname`, \n                                                      breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1), \n                                                      labels = c(\"muy bajo\", \"bajo\", \"medio\", \"alto\", \"muy alto\"),\n                                                      include.lowest = TRUE))\n# Discretización de la columna description length\ndatos_refinados$`description length` &lt;- ordered(cut(datos_refinados$`description length`,\n                                                     breaks = c(0, 15, 25, 80, 150),\n                                                     labels = c(\"muy corto\" , \"medio\", \"largo\", \"muy largo\"),\n                                                    include.lowest = TRUE))\n# Discretización de la columna fullname words\ndatos_refinados$`fullname words` &lt;- ordered(cut(datos_refinados$`fullname words`,\n                                                 breaks = c(0, 1, 3, 5, Inf),\n                                                 labels = c(\"muy corto\", \"medio\", \"largo\", \"muy largo\"),include.lowest = TRUE))\n\n\n3.3.1 discretizeDF\nEsta función del paquete de arules implementa varios métodos básicos no supervisados para convertir una variable continua en una variable categórica (factor) usando diferentes estrategias de agrupamiento.\nVamos a quitar primero las columnas binarias a las que queremos asignar un valor personalizado.\n\ndatos_refinados_clone &lt;- datos\n\ncolumnas_binarias = c(\"profile pic\",\"name==username\",\"external URL\",\"fake\",\"private\")\n\nfor (columna in columnas_binarias) {\n  datos_refinados_clone[[columna]] &lt;-  factor(datos_refinados_clone[[columna]], labels = c(\"No\", \"Si\"))\n}\n\nVamos a ver algunas estrategias:\n\n3.3.1.1 K-means:\n\nkmeansDisc &lt;- discretizeDF(datos_refinados_clone, default = list(method = \"cluster\", breaks = 5, \n  labels = c(\"muy bajo\", \"bajo\",\"medio\",\"alto\",\"muy alto\")))\nhead(kmeansDisc)\n\n# A tibble: 6 × 12\n  `profile pic` `nums/length username` `fullname words` `nums/length fullname`\n  &lt;fct&gt;         &lt;fct&gt;                  &lt;fct&gt;            &lt;fct&gt;                 \n1 Si            medio                  muy bajo         muy bajo              \n2 Si            muy bajo               medio            muy bajo              \n3 Si            bajo                   medio            muy bajo              \n4 Si            muy bajo               bajo             muy bajo              \n5 Si            muy bajo               medio            muy bajo              \n6 Si            muy bajo               alto             muy bajo              \n# ℹ 8 more variables: `name==username` &lt;fct&gt;, `description length` &lt;fct&gt;,\n#   `external URL` &lt;fct&gt;, private &lt;fct&gt;, `#posts` &lt;fct&gt;, `#followers` &lt;fct&gt;,\n#   `#follows` &lt;fct&gt;, fake &lt;fct&gt;\n\n\n\n\n3.3.1.2 interval\n\nfixedDisc &lt;- discretizeDF(datos_refinados_clone, default = list(method = \"interval\", breaks = 5, \n  labels = c(\"muy bajo\", \"bajo\",\"medio\",\"alto\",\"muy alto\")))\nhead(fixedDisc)\n\n# A tibble: 6 × 12\n  `profile pic` `nums/length username` `fullname words` `nums/length fullname`\n  &lt;fct&gt;         &lt;fct&gt;                  &lt;fct&gt;            &lt;fct&gt;                 \n1 Si            bajo                   muy bajo         muy bajo              \n2 Si            muy bajo               muy bajo         muy bajo              \n3 Si            muy bajo               muy bajo         muy bajo              \n4 Si            muy bajo               muy bajo         muy bajo              \n5 Si            muy bajo               muy bajo         muy bajo              \n6 Si            muy bajo               bajo             muy bajo              \n# ℹ 8 more variables: `name==username` &lt;fct&gt;, `description length` &lt;fct&gt;,\n#   `external URL` &lt;fct&gt;, private &lt;fct&gt;, `#posts` &lt;fct&gt;, `#followers` &lt;fct&gt;,\n#   `#follows` &lt;fct&gt;, fake &lt;fct&gt;",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reglas de asociación</span>"
    ]
  },
  {
    "objectID": "reglasAsociacion.html#generar-dataset-de-transacciones",
    "href": "reglasAsociacion.html#generar-dataset-de-transacciones",
    "title": "3  Reglas de asociación",
    "section": "3.4 Generar dataset de transacciones",
    "text": "3.4 Generar dataset de transacciones\nAhora, una vez discretizado el dataframe, el siguiente paso es generar un dataset de transacciones. Este tipo de dataset es esencial para aplicar algoritmos de reglas de asociación como Apriori.\nEn un dataset de transacciones, cada fila representa una transacción, que es una colección de elementos o ítems.\n\ndatos_refinadosT &lt;- as(datos_refinados, \"transactions\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reglas de asociación</span>"
    ]
  },
  {
    "objectID": "reglasAsociacion.html#generar-reglas",
    "href": "reglasAsociacion.html#generar-reglas",
    "title": "3  Reglas de asociación",
    "section": "3.5 Generar reglas",
    "text": "3.5 Generar reglas\nAhora que ya tenemos todo listo, podemos utilizar los algoritmos de generación de reglas. En nuestro caso, vamos a utilizar Apriori. Para generar reglas primero necesitamos establecer un valor para el soporte y confianza mínima, estos valores nos permitirán controlar la cantidad y calidad de las reglas que se generarán.\n\n rules &lt;- apriori(datos_refinadosT,  parameter = list(supp = 0.3, conf = 0.01, target = \"rules\")) \n\nApriori\n\nParameter specification:\n confidence minval smax arem  aval originalSupport maxtime support minlen\n       0.01    0.1    1 none FALSE            TRUE       5     0.3      1\n maxlen target  ext\n     10  rules TRUE\n\nAlgorithmic control:\n filter tree heap memopt load sort verbose\n    0.1 TRUE TRUE  FALSE TRUE    2    TRUE\n\nAbsolute minimum support count: 172 \n\nset item appearances ...[0 item(s)] done [0.00s].\nset transactions ...[40 item(s), 576 transaction(s)] done [0.00s].\nsorting and recoding items ... [16 item(s)] done [0.00s].\ncreating transaction tree ... done [0.00s].\nchecking subsets of size 1 2 3 4 5 6 7 done [0.00s].\nwriting ... [1157 rule(s)] done [0.00s].\ncreating S4 object  ... done [0.00s].\n\n rules\n\nset of 1157 rules \n\n\nHemos obtenido una buena cantidad de reglas para continuar nuestro análisis.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reglas de asociación</span>"
    ]
  },
  {
    "objectID": "reglasAsociacion.html#refinar-reglas",
    "href": "reglasAsociacion.html#refinar-reglas",
    "title": "3  Reglas de asociación",
    "section": "3.6 Refinar reglas",
    "text": "3.6 Refinar reglas\nAhora que hemos obtenido las reglas, necesitamos cribarlas y eliminar todas aquellas que no nos interesan, que sean redundantes o no significativas.\n\n3.6.1 Eliminar reglas redundantes\n\nrules &lt;- rules[which(is.redundant(rules))]\n\n\n\n3.6.2 Eliminar reglas no significativas\n\nrules &lt;- rules[which(is.significant(rules))]\n\nVamos a ver cuentas reglas han quedado después de filtrarlas:\n\nlength(rules)\n\n[1] 569",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reglas de asociación</span>"
    ]
  },
  {
    "objectID": "reglasAsociacion.html#análisis-de-reglas-obtenidas",
    "href": "reglasAsociacion.html#análisis-de-reglas-obtenidas",
    "title": "3  Reglas de asociación",
    "section": "3.7 Análisis de reglas obtenidas",
    "text": "3.7 Análisis de reglas obtenidas\nNuestro objetivo es detectar y diferenciar cuentas falsas de las verdaderas, por lo tanto, vamos a centrar nuestro análisis en esos dos atributos: “fake=Si” y “fake=No”. Como tenemos diferentes métricas, vamos a analizarlas por separado:\n\n3.7.1 Soporte\nVamos primero a analizar las reglas ordenándolas por el soporte. Recordamos que un soporte alto indica que la regla se aplica a una gran proporción del dataset, lo que sugiere que la combinación de características es común y relevante.\n\nrules &lt;- sort(rules,by=\"support\")\ninspect(head(rules))\n\n    lhs                                 rhs                               support confidence  coverage     lift count\n[1] {nums/length fullname=muy bajo,                                                                                  \n     external URL=No}                =&gt; {name==username=No}             0.7881944  0.9848156 0.8003472 1.020241   454\n[2] {nums/length username=muy bajo,                                                                                  \n     name==username=No}              =&gt; {nums/length fullname=muy bajo} 0.6250000  0.9863014 0.6336806 1.078007   360\n[3] {nums/length fullname=muy bajo,                                                                                  \n     name==username=No}              =&gt; {nums/length username=muy bajo} 0.6250000  0.6936416 0.9010417 1.071146   360\n[4] {name==username=No,                                                                                              \n     description length=muy corto}   =&gt; {external URL=No}               0.6041667  0.9747899 0.6197917 1.103102   348\n[5] {name==username=No,                                                                                              \n     external URL=No}                =&gt; {description length=muy corto}  0.6041667  0.7102041 0.8506944 1.096723   348\n[6] {nums/length fullname=muy bajo,                                                                                  \n     description length=muy corto}   =&gt; {external URL=No}               0.5590278  0.9728097 0.5746528 1.100861   322\n\n\nEn este caso, el soporte es 0.7881944, lo que significa que el 78.82% de las transacciones en el dataset contienen tanto el antecedente {nums/length fullname=muy bajo, external URL=No} como el consecuente {name==username=No}.\n\nr2 &lt;- subset(rules, subset = rhs %in% c(\"fake=Si\"))\ninspect(head(r2))\n\n    lhs                                 rhs         support confidence  coverage     lift count\n[1] {name==username=No,                                                                        \n     external URL=No}                =&gt; {fake=Si} 0.4670139  0.5489796 0.8506944 1.097959   269\n[2] {name==username=No,                                                                        \n     description length=muy corto}   =&gt; {fake=Si} 0.4253472  0.6862745 0.6197917 1.372549   245\n[3] {name==username=No,                                                                        \n     description length=muy corto,                                                             \n     external URL=No}                =&gt; {fake=Si} 0.4253472  0.7040230 0.6041667 1.408046   245\n[4] {nums/length fullname=muy bajo,                                                            \n     external URL=No}                =&gt; {fake=Si} 0.4218750  0.5271150 0.8003472 1.054230   243\n[5] {nums/length fullname=muy bajo,                                                            \n     description length=muy corto}   =&gt; {fake=Si} 0.3819444  0.6646526 0.5746528 1.329305   220\n[6] {nums/length fullname=muy bajo,                                                            \n     description length=muy corto,                                                             \n     external URL=No}                =&gt; {fake=Si} 0.3819444  0.6832298 0.5590278 1.366460   220\n\n\n\n\n3.7.2 Confianza\nAhora vamos a analizar las reglas ordenándolas por la confianza. Recordamos que a mayor confianza, mayor es la fiabilidad de que la presencia de las características en el antecedente de la regla A implicará la presencia de las características en el consecuente de la regla B.\n\nrules &lt;- sort(rules,by=\"confidence\")\ninspect(head(rules)) \n\n    lhs                                 rhs                   support confidence  coverage     lift count\n[1] {name==username=No,                                                                                  \n     fake=Si}                        =&gt; {external URL=No}   0.4670139          1 0.4670139 1.131631   269\n[2] {description length=muy corto,                                                                       \n     fake=Si}                        =&gt; {external URL=No}   0.4531250          1 0.4531250 1.131631   261\n[3] {name==username=No,                                                                                  \n     description length=muy corto,                                                                       \n     fake=Si}                        =&gt; {external URL=No}   0.4253472          1 0.4253472 1.131631   245\n[4] {nums/length fullname=muy bajo,                                                                      \n     fake=Si}                        =&gt; {external URL=No}   0.4218750          1 0.4218750 1.131631   243\n[5] {profile pic=Si,                                                                                     \n     nums/length fullname=muy bajo,                                                                      \n     #followers=muy alto}            =&gt; {name==username=No} 0.4166667          1 0.4166667 1.035971   240\n[6] {nums/length fullname=muy bajo,                                                                      \n     name==username=No,                                                                                  \n     fake=Si}                        =&gt; {external URL=No}   0.4097222          1 0.4097222 1.131631   236\n\n\nEn este caso, la confianza es 1, lo que significa que el 100% de las transacciones que tienen el antecedente también tienen el consecuente.\n\nr2 &lt;- subset(rules, subset = rhs %in% c(\"fake=Si\"))\ninspect(head(r2))\n\n    lhs                                 rhs         support confidence  coverage     lift count\n[1] {external URL=No,                                                                          \n     #posts=muy bajo}                =&gt; {fake=Si} 0.3072917  0.9567568 0.3211806 1.913514   177\n[2] {fullname words=muy corto,                                                                 \n     name==username=No,                                                                        \n     description length=muy corto,                                                             \n     external URL=No}                =&gt; {fake=Si} 0.3454861  0.8122449 0.4253472 1.624490   199\n[3] {fullname words=muy corto,                                                                 \n     name==username=No,                                                                        \n     description length=muy corto}   =&gt; {fake=Si} 0.3454861  0.8024194 0.4305556 1.604839   199\n[4] {fullname words=muy corto,                                                                 \n     nums/length fullname=muy bajo,                                                            \n     description length=muy corto,                                                             \n     external URL=No}                =&gt; {fake=Si} 0.3072917  0.7972973 0.3854167 1.594595   177\n[5] {fullname words=muy corto,                                                                 \n     nums/length fullname=muy bajo,                                                            \n     description length=muy corto}   =&gt; {fake=Si} 0.3072917  0.7866667 0.3906250 1.573333   177\n[6] {fullname words=muy corto,                                                                 \n     name==username=No,                                                                        \n     external URL=No}                =&gt; {fake=Si} 0.3750000  0.7105263 0.5277778 1.421053   216\n\n\n\n\n3.7.3 Lift\nPor último, vamos a analizar las reglas ordenándolas primero por el lift de las reglas. Recordamos que un lift alto indica que la presencia de A incrementa significativamente la probabilidad de que B ocurra, lo que sugiere una fuerte asociación entre las características.\n\nrules &lt;- sort(rules,by=\"lift\")\ninspect(head(rules)) \n\n    lhs                                 rhs                     support confidence  coverage     lift count\n[1] {name==username=No,                                                                                    \n     #follows=muy alto,                                                                                    \n     fake=No}                        =&gt; {#followers=muy alto} 0.3506944  0.9223744 0.3802083 2.059255   202\n[2] {profile pic=Si,                                                                                       \n     #follows=muy alto,                                                                                    \n     fake=No}                        =&gt; {#followers=muy alto} 0.3472222  0.9216590 0.3767361 2.057657   200\n[3] {profile pic=Si,                                                                                       \n     name==username=No,                                                                                    \n     #follows=muy alto,                                                                                    \n     fake=No}                        =&gt; {#followers=muy alto} 0.3472222  0.9216590 0.3767361 2.057657   200\n[4] {nums/length fullname=muy bajo,                                                                        \n     #follows=muy alto,                                                                                    \n     fake=No}                        =&gt; {#followers=muy alto} 0.3437500  0.9209302 0.3732639 2.056030   198\n[5] {nums/length fullname=muy bajo,                                                                        \n     name==username=No,                                                                                    \n     #follows=muy alto,                                                                                    \n     fake=No}                        =&gt; {#followers=muy alto} 0.3437500  0.9209302 0.3732639 2.056030   198\n[6] {nums/length username=muy bajo,                                                                        \n     #follows=muy alto,                                                                                    \n     fake=No}                        =&gt; {#followers=muy alto} 0.3229167  0.9207921 0.3506944 2.055722   186\n\n\nEn este caso, el lift es 2.059, lo que sugiere que la aparición de “external URL=Si” es aproximadamente 2 veces más probable cuando se dan las condiciones en el antecedente.\n\nr2 &lt;- subset(rules, subset = rhs %in% c(\"fake=Si\")) \ninspect(head(r2))\n\n    lhs                                 rhs         support confidence  coverage     lift count\n[1] {external URL=No,                                                                          \n     #posts=muy bajo}                =&gt; {fake=Si} 0.3072917  0.9567568 0.3211806 1.913514   177\n[2] {fullname words=muy corto,                                                                 \n     name==username=No,                                                                        \n     description length=muy corto,                                                             \n     external URL=No}                =&gt; {fake=Si} 0.3454861  0.8122449 0.4253472 1.624490   199\n[3] {fullname words=muy corto,                                                                 \n     name==username=No,                                                                        \n     description length=muy corto}   =&gt; {fake=Si} 0.3454861  0.8024194 0.4305556 1.604839   199\n[4] {fullname words=muy corto,                                                                 \n     nums/length fullname=muy bajo,                                                            \n     description length=muy corto,                                                             \n     external URL=No}                =&gt; {fake=Si} 0.3072917  0.7972973 0.3854167 1.594595   177\n[5] {fullname words=muy corto,                                                                 \n     nums/length fullname=muy bajo,                                                            \n     description length=muy corto}   =&gt; {fake=Si} 0.3072917  0.7866667 0.3906250 1.573333   177\n[6] {fullname words=muy corto,                                                                 \n     name==username=No,                                                                        \n     external URL=No}                =&gt; {fake=Si} 0.3750000  0.7105263 0.5277778 1.421053   216",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reglas de asociación</span>"
    ]
  },
  {
    "objectID": "reglasAsociacion.html#visualización-de-reglas",
    "href": "reglasAsociacion.html#visualización-de-reglas",
    "title": "3  Reglas de asociación",
    "section": "3.8 Visualización de reglas",
    "text": "3.8 Visualización de reglas\n\nplot(rules)\n\nTo reduce overplotting, jitter is added! Use jitter = 0 to prevent jitter.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reglas de asociación</span>"
    ]
  },
  {
    "objectID": "fca.html",
    "href": "fca.html",
    "title": "4  Formal Concept Analysis",
    "section": "",
    "text": "4.1 Escalado\nComo necesitamos que nuestro dataSet sea binario, necesitamos aplicarles tecniac como el escaldo para obtener el resultado deseado:",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Formal Concept Analysis</span>"
    ]
  },
  {
    "objectID": "fca.html#escalado",
    "href": "fca.html#escalado",
    "title": "4  Formal Concept Analysis",
    "section": "",
    "text": "4.1.1 Escalado nominal\nEl escalado nominal se utiliza para atributos cuyos valores son excluyentes entre sí, como por ejemplo, los atributos que son “Sí” y “No”.\n\nfc_datos$scale(\"profile pic\",type = \"nominal\",c(\"Si\",\"No\"))\nfc_datos$scale(\"name==username\",type = \"nominal\",c(\"Si\",\"No\"))\nfc_datos$scale(\"fake\",type = \"nominal\",c(\"Si\",\"No\"))\nfc_datos$scale(\"private\",type = \"nominal\",c(\"Si\",\"No\"))\nfc_datos$scale(\"external URL\",type = \"nominal\",c(\"Si\",\"No\"))\nfc_datos\n\nFormalContext with 576 objects and 17 attributes.\n# A tibble: 576 × 17\n   `profile pic = Si` `profile pic = No` `nums/length username` `fullname words`\n                &lt;dbl&gt;              &lt;dbl&gt;                  &lt;dbl&gt;            &lt;dbl&gt;\n 1                  1                  0                   0.27                0\n 2                  1                  0                   0                   2\n 3                  1                  0                   0.1                 2\n 4                  1                  0                   0                   1\n 5                  1                  0                   0                   2\n 6                  1                  0                   0                   4\n 7                  1                  0                   0                   2\n 8                  1                  0                   0                   2\n 9                  1                  0                   0                   0\n10                  1                  0                   0                   2\n# ℹ 566 more rows\n# ℹ 13 more variables: `nums/length fullname` &lt;dbl&gt;,\n#   `name==username = Si` &lt;dbl&gt;, `name==username = No` &lt;dbl&gt;,\n#   `description length` &lt;dbl&gt;, `external URL = Si` &lt;dbl&gt;,\n#   `external URL = No` &lt;dbl&gt;, `private = Si` &lt;dbl&gt;, `private = No` &lt;dbl&gt;,\n#   `#posts` &lt;dbl&gt;, `#followers` &lt;dbl&gt;, `#follows` &lt;dbl&gt;, `fake = Si` &lt;dbl&gt;,\n#   `fake = No` &lt;dbl&gt;\n\n\n\n\n4.1.2 Escalado intervalo\nComo los demás datos son valores continuos, tenemos que utilizar un tipo de escalado distinto. Podemos utilizar modos como el ordinal; sin embargo, este nos generarían conceptos demasiado largos. Por lo tanto, el mejor modo a emplear para estos datos es el intervalo.\n\nfc_datos$scale(\"nums/length username\", \n         type = \"interval\", \n         values =c(0, 0.2, 0.4, 0.6, 0.8, 1)\n         )\n\nfc_datos$scale(\"nums/length fullname\", \n         type = \"interval\", \n         values = c(0, 0.2, 0.4, 0.6, 0.8, 1) \n        )\n\nfc_datos$scale(\"fullname words\", \n         type = \"interval\", \n         values = c(0, 1, 3, 5, Inf) \n         )\n\nfc_datos$scale(\"description length\", \n         type = \"interval\", \n         values =c(0, 15, 25, 80, 150)\n         )\n\nfc_datos$scale(\"#posts\", \n         type = \"interval\", \n         values =  c(0,1, 5, 10, 50, Inf)\n         )\n\nfc_datos$scale(\"#followers\", \n         type = \"interval\", \n         values = c(0, 10, 60, 200, Inf)\n         )\n\nfc_datos$scale(\"#follows\", \n         type = \"interval\", \n         values = c(0, 10, 60, 200, Inf)\n         )",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Formal Concept Analysis</span>"
    ]
  },
  {
    "objectID": "fca.html#conceptos",
    "href": "fca.html#conceptos",
    "title": "4  Formal Concept Analysis",
    "section": "4.2 Conceptos",
    "text": "4.2 Conceptos\nUna vez tenemos los datos en la forma que buscamos, podemos utilizar el paquete fcaR para generar conceptos. Los conceptos son componentes fundamentales que representan agrupaciones de objetos y atributos con una relación particular.\nDe manera formal, un concepto (𝐴,𝐵) se define como un par donde:\n\n𝐴 es el conjunto de objetos (extensión) que tienen todos los atributos de 𝐵.\n𝐵 es el conjunto de atributos (intensión) que son poseídos por todos los objetos de 𝐴.\n\n\n4.2.0.1 Cálculo de los conceptos del contexto\nPara calcular los conceptos de nuestros datos, utilizamos la función find_concepts.\n\nfc_datos$find_concepts()\n\nfc_datos$concepts$size()\n\n[1] 7008\n\n\nVemos que hemos obtenido un gran numero de conceptos, vamos a ver los primeros:\n\nhead(fc_datos$concepts)\n\nA set of 6 concepts:\n1: ({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576}, {})\n2: ({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288}, {fake = No})\n3: ({1, 2, 4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 31, 32, 34, 35, 36, 37, 38, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 106, 107, 108, 109, 111, 112, 113, 115, 116, 117, 118, 119, 120, 122, 123, 126, 127, 128, 130, 131, 132, 133, 134, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 223, 224, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 241, 244, 246, 248, 250, 251, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 277, 278, 279, 280, 282, 284, 285, 286, 289, 291, 293, 296, 303, 310, 317, 320, 322, 324, 325, 328, 332, 338, 339, 343, 344, 349, 354, 356, 359, 360, 361, 378, 380, 382, 385, 399, 401, 403, 415, 420, 421, 422, 427, 428, 434, 436, 443, 445, 447, 451, 454, 460, 461, 462, 467, 471, 476, 482, 483, 491, 508, 509, 511, 512, 518, 523, 527, 531, 532, 534, 535, 536, 538, 539, 541, 542, 547, 549, 553, 554, 558, 561, 563, 566, 567, 568, 570, 572, 574, 576}, {#follows is (200, Inf]})\n4: ({3, 5, 6, 7, 8, 25, 26, 28, 29, 30, 33, 39, 40, 47, 61, 63, 64, 73, 105, 110, 114, 121, 124, 125, 129, 135, 140, 145, 150, 160, 163, 182, 183, 189, 190, 191, 192, 204, 216, 217, 222, 225, 227, 238, 240, 243, 249, 252, 253, 258, 274, 283, 288, 292, 294, 306, 318, 323, 334, 335, 345, 347, 348, 352, 358, 362, 363, 364, 365, 368, 370, 372, 376, 381, 383, 391, 393, 395, 396, 397, 400, 402, 404, 405, 406, 407, 410, 411, 413, 416, 417, 419, 424, 429, 431, 433, 435, 438, 439, 440, 444, 446, 448, 450, 453, 457, 458, 463, 474, 477, 484, 488, 528, 530, 546, 548, 550, 555, 560, 562, 564, 569, 571, 573, 575}, {#follows is (60, 200]})\n5: ({41, 44, 76, 102, 104, 205, 242, 245, 247, 259, 273, 281, 287, 290, 295, 297, 299, 300, 305, 307, 311, 312, 313, 314, 315, 319, 321, 326, 327, 329, 330, 331, 333, 336, 342, 350, 351, 353, 355, 357, 366, 367, 369, 371, 373, 374, 375, 379, 384, 386, 387, 388, 389, 390, 394, 398, 408, 414, 423, 425, 426, 432, 437, 441, 442, 449, 452, 455, 459, 464, 465, 466, 473, 475, 478, 479, 481, 485, 487, 492, 494, 495, 496, 498, 500, 501, 502, 503, 505, 506, 507, 510, 513, 515, 521, 522, 526, 529, 533, 540, 543, 544, 545, 551, 552, 556, 557, 565}, {#follows is (10, 60]})\n6: ({45, 166, 298, 301, 304, 308, 309, 316, 337, 341, 377, 409, 412, 418, 430, 456, 468, 469, 470, 472, 480, 486, 490, 504, 514, 516, 519, 524, 525, 537, 559}, {#follows is (0, 10]})\n\n\nObservamos un curioso resultado: vemos una gran cantidad de números. Estos números representan los índices de las cuentas que tienen dichos atributos. Sin embargo, esta información no nos es útil. Vamos a calcular el “extent” del atributo “fake = Si”, y veremos que nos devuelve los índices de todas las cuentas que son falsas.\n\ns1 &lt;- Set$new(fc_datos$attributes)\ns1$assign(fake = \"Si\")\nfc_datos$extent(s1)\n\n{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\n  23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,\n  42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n  61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n  80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,\n  99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114,\n  115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,\n  130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144,\n  145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n  160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174,\n  175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189,\n  190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204,\n  205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219,\n  220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234,\n  235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249,\n  250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264,\n  265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279,\n  280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294,\n  295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309,\n  310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324,\n  325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339,\n  340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354,\n  355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369,\n  370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384,\n  385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399,\n  400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414,\n  415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429,\n  430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444,\n  445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459,\n  460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474,\n  475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489,\n  490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504,\n  505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519,\n  520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534,\n  535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549,\n  550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564,\n  565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576}",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Formal Concept Analysis</span>"
    ]
  },
  {
    "objectID": "fca.html#implicaciones",
    "href": "fca.html#implicaciones",
    "title": "4  Formal Concept Analysis",
    "section": "4.3 Implicaciones",
    "text": "4.3 Implicaciones\nLas implicaciones son reglas derivadas de los datos que describen relaciones lógicas entre conjuntos de atributos. En FCA, las implicaciones se extraen a partir de los conceptos y se utilizan para describir las dependencias entre los atributos de manera formal.\nEstas implicaciones las podemos ver como las reglas de asociación que obtuvimos anteriormente.\n\n4.3.1 Calculo de los implicaciones del contexto\nPara calcular las implicaciones de nuestros datos, utilizamos la función find_implications.\n\nfc_datos$find_implications()\n\n¿Cuántas implicaciones se han extraído?\n\nfc_datos$implications$cardinality()\n\n[1] 1905\n\n\nVemos que hemos obtenido un gran numero de implicaciones, vamos a ver los primeros:\n\nhead(fc_datos$implications)\n\nImplication set with 6 implications.\nRule 1: {fake = Si} -&gt; {external URL = No}\nRule 2: {#follows is (200, Inf], fake = No} -&gt; {name==username = No}\nRule 3: {#follows is (60, 200], fake = No} -&gt; {profile pic = Si}\nRule 4: {#follows is (60, 200], #follows is (200, Inf]} -&gt; {profile pic = Si,\n  profile pic = No, nums/length username is (0, 0.2], nums/length username\n  is (0.2, 0.4], nums/length username is (0.4, 0.6], nums/length username\n  is (0.6, 0.8], nums/length username is (0.8, 1], fullname words is (0, 1],\n  fullname words is (1, 3], fullname words is (3, 5], fullname words is (5,\n  Inf], nums/length fullname is (0, 0.2], nums/length fullname is (0.2, 0.4],\n  nums/length fullname is (0.4, 0.6], nums/length fullname is (0.6, 0.8],\n  nums/length fullname is (0.8, 1], name==username = Si, name==username = No,\n  description length is (0, 15], description length is (15, 25], description\n  length is (25, 80], description length is (80, 150], external URL = Si,\n  external URL = No, private = Si, private = No, #posts is (0, 1], #posts is (1,\n  5], #posts is (5, 10], #posts is (10, 50], #posts is (50, Inf], #followers is\n  (0, 10], #followers is (10, 60], #followers is (60, 200], #followers is (200,\n  Inf], #follows is (0, 10], #follows is (10, 60], fake = Si, fake = No}\nRule 5: {#follows is (10, 60], fake = No} -&gt; {profile pic = Si, name==username =\n  No}\nRule 6: {#follows is (10, 60], #follows is (200, Inf]} -&gt; {profile pic = Si,\n  profile pic = No, nums/length username is (0, 0.2], nums/length username\n  is (0.2, 0.4], nums/length username is (0.4, 0.6], nums/length username\n  is (0.6, 0.8], nums/length username is (0.8, 1], fullname words is (0, 1],\n  fullname words is (1, 3], fullname words is (3, 5], fullname words is (5,\n  Inf], nums/length fullname is (0, 0.2], nums/length fullname is (0.2, 0.4],\n  nums/length fullname is (0.4, 0.6], nums/length fullname is (0.6, 0.8],\n  nums/length fullname is (0.8, 1], name==username = Si, name==username = No,\n  description length is (0, 15], description length is (15, 25], description\n  length is (25, 80], description length is (80, 150], external URL = Si,\n  external URL = No, private = Si, private = No, #posts is (0, 1], #posts is (1,\n  5], #posts is (5, 10], #posts is (10, 50], #posts is (50, Inf], #followers is\n  (0, 10], #followers is (10, 60], #followers is (60, 200], #followers is (200,\n  Inf], #follows is (0, 10], #follows is (60, 200], fake = Si, fake = No}\n\n\nComo tenemos un gran número de implicaciones, vamos a intentar reducirlas y quedarnos con las más importantes aplicando técnicas de simplificación.\n\n\n4.3.2 Cálculo de la media de la parte izquierda y derecha de las implicaciones\nEste cálculo nos proporciona una medida cuantitativa de las relaciones entre atributos. El tamaño de una implicación se refiere al número de atributos en sus conjuntos de premisa A y su consecuente B. La media de estos tamaños se obtiene haciendo la media del número de atributos en las partes izquierda y derecha de todas las implicaciones, ofreciendo una visión general.\n\ncolMeans(fc_datos$implications$size())\n\n     LHS      RHS \n5.809974 4.205249 \n\n\nCon esto valores obtenemos, en la parte derecha de la regla suele haber una media de 5,8 elementos mientras que en la parte derecha una media de 4,2 elementos.\n\n\n4.3.3 Lógica de simplificación\nVamos a intentar de simplificar nuestras implicaciones para poder quedarnos con las mas importantes y significativas.\n\nfc_datos$implications$apply_rules(rules = c(\"simplification\"))\n\nProcessing batch\n\n\n--&gt; Simplification: from 1905 to 1905.\n\nhead(fc_datos$implications)\n\nImplication set with 6 implications.\nRule 1: {fake = Si} -&gt; {external URL = No}\nRule 2: {#follows is (200, Inf], fake = No} -&gt; {name==username = No}\nRule 3: {#follows is (60, 200], fake = No} -&gt; {profile pic = Si}\nRule 4: {#follows is (60, 200], #follows is (200, Inf]} -&gt; {profile pic = Si,\n  profile pic = No, nums/length username is (0, 0.2], nums/length username\n  is (0.2, 0.4], nums/length username is (0.4, 0.6], nums/length username\n  is (0.6, 0.8], nums/length username is (0.8, 1], fullname words is (0, 1],\n  fullname words is (1, 3], fullname words is (3, 5], fullname words is (5,\n  Inf], nums/length fullname is (0, 0.2], nums/length fullname is (0.2, 0.4],\n  nums/length fullname is (0.4, 0.6], nums/length fullname is (0.6, 0.8],\n  nums/length fullname is (0.8, 1], name==username = Si, name==username = No,\n  description length is (0, 15], description length is (15, 25], description\n  length is (25, 80], description length is (80, 150], external URL = Si,\n  external URL = No, private = Si, private = No, #posts is (0, 1], #posts is (1,\n  5], #posts is (5, 10], #posts is (10, 50], #posts is (50, Inf], #followers is\n  (0, 10], #followers is (10, 60], #followers is (60, 200], #followers is (200,\n  Inf], #follows is (0, 10], #follows is (10, 60], fake = Si, fake = No}\nRule 5: {#follows is (10, 60], fake = No} -&gt; {profile pic = Si, name==username =\n  No}\nRule 6: {#follows is (10, 60], #follows is (200, Inf]} -&gt; {profile pic = Si,\n  profile pic = No, nums/length username is (0, 0.2], nums/length username\n  is (0.2, 0.4], nums/length username is (0.4, 0.6], nums/length username\n  is (0.6, 0.8], nums/length username is (0.8, 1], fullname words is (0, 1],\n  fullname words is (1, 3], fullname words is (3, 5], fullname words is (5,\n  Inf], nums/length fullname is (0, 0.2], nums/length fullname is (0.2, 0.4],\n  nums/length fullname is (0.4, 0.6], nums/length fullname is (0.6, 0.8],\n  nums/length fullname is (0.8, 1], name==username = Si, name==username = No,\n  description length is (0, 15], description length is (15, 25], description\n  length is (25, 80], description length is (80, 150], external URL = Si,\n  external URL = No, private = Si, private = No, #posts is (0, 1], #posts is (1,\n  5], #posts is (5, 10], #posts is (10, 50], #posts is (50, Inf], #followers is\n  (0, 10], #followers is (10, 60], #followers is (60, 200], #followers is (200,\n  Inf], #follows is (0, 10], #follows is (60, 200], fake = Si, fake = No}\n\n\n\nfc_datos$implications$cardinality()\n\n[1] 1905\n\n\nVemos que el número de implicaciones no se ha reducido como podríamos haber pensado. Esto se debe a que al simplificar, realmente no se reduce la cantidad de implicaciones, sino los atributos de estas, eliminando verdades absolutas u otros parámetros redundantes.\n\n\n4.3.4 Eliminar la redundancia\nTambién vamos a aplicar composition, generalization, simplification y rsimplification para eliminar la redundancia dentro de las implicaciones.\n\nfc_datos$implications$apply_rules(rules = c(\"composition\",\n                                              \"generalization\",\n                                             \"simplification\",\n                                             \"rsimplification\"))\n\nProcessing batch\n\n\n--&gt; Composition: from 1905 to 1905.\n\n\n--&gt; Generalization: from 1905 to 1905.\n\n\n--&gt; Simplification: from 1905 to 1905.\n\n\n--&gt; Right Simplification: from 1905 to 1905.\n\nhead(fc_datos$implications)\n\nImplication set with 6 implications.\nRule 1: {fake = Si} -&gt; {external URL = No}\nRule 2: {#follows is (200, Inf], fake = No} -&gt; {name==username = No}\nRule 3: {#follows is (60, 200], fake = No} -&gt; {profile pic = Si}\nRule 4: {#follows is (60, 200], #follows is (200, Inf]} -&gt; {#follows is (0, 10]}\nRule 5: {#follows is (10, 60], fake = No} -&gt; {profile pic = Si, name==username =\n  No}\nRule 6: {#follows is (10, 60], #follows is (200, Inf]} -&gt; {#follows is (0, 10]}\n\n\n\nfc_datos$implications$cardinality()\n\n[1] 1905\n\n\nAl igual que antes, el numero de implicaciones no se ha reducido, como podíamos haber pensado. Esto se debe a que al simplificar realmente no reduce la cantidad e implicaciones, sino los atributos de estas, eliminando verdades absolutas o otras parámetros redundantes.\n\ncolMeans(fc_datos$implications$size())\n\n     LHS      RHS \n3.317060 1.247769 \n\n\nAhora, después de simplificar nuestras implicaciones, la media de atributos de cada parte de la regla ha bajado considerablemente.\n\n\n4.3.5 Análisis de implicaciones importantes\nAl igual que con las reglas, nos interesa las implicaciones que tengan en su parte derecha los atributos sobre si la cuenta es falsa o no, puesto que nuestro objetivo es detectar estas cuentas falsas.\n\nhead(fc_datos$implications$filter(rhs=\"fake = Si\"))\n\nImplication set with 6 implications.\nRule 1: {#followers is (10, 60], #follows is (200, Inf]} -&gt; {fake = Si}\nRule 2: {#followers is (10, 60], #follows is (0, 10]} -&gt; {name==username = No,\n  private = No, fake = Si}\nRule 3: {#followers is (0, 10], #follows is (60, 200]} -&gt; {name==username = No,\n  private = Si, fake = Si}\nRule 4: {#followers is (0, 10], #follows is (0, 10]} -&gt; {fake = Si}\nRule 5: {private = No, #followers is (0, 10]} -&gt; {fake = Si}\nRule 6: {description length is (25, 80], #posts is (1, 5], #follows is (10, 60]}\n  -&gt; {fake = Si}\n\n\nEntendido, aquí está la corrección:\nObservando esta serie de reglas, podemos obtener gran cantidad de información para poder detectar y diferenciar las cuentas fake de las reales. Por ejemplo, una que puede parecer muy obvia es que si sigue a mucha gente pero le siguen poca gente, es falsa.\nVamos a ver también las cuentas reales:\n\nhead(fc_datos$implications$filter(rhs=\"fake = No\"))\n\nImplication set with 6 implications.\nRule 1: {#followers is (200, Inf], #follows is (10, 60]} -&gt; {private = No, fake\n  = No}\nRule 2: {external URL = Si} -&gt; {profile pic = Si, fake = No}\nRule 3: {#posts is (50, Inf], #follows is (0, 10]} -&gt; {private = No, #followers\n  is (200, Inf], fake = No}\nRule 4: {#posts is (0, 1], #followers is (200, Inf]} -&gt; {#follows is (200, Inf],\n  fake = No}\nRule 5: {description length is (25, 80], #posts is (50, Inf]} -&gt; {profile pic =\n  Si, fake = No}\nRule 6: {description length is (25, 80], #posts is (5, 10]} -&gt; {fake = No}\n\n\nAl contrario de lo anterior, si sigue a poca gente y mucha gente le sigue, significa que la cuenta es real.\nAmbas suposiciones las podemos obtener gracias a que sabemos que para seguir a una persona, no es necesario que esa persona dé su consentimiento, sino que puede ser algo automático. Sin embargo, obtener seguidores requiere a una segunda persona que desee seguir a esa cuenta, pudiendo verla previamente, lo que es más difícil de conseguir para cuentas falsas.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Formal Concept Analysis</span>"
    ]
  },
  {
    "objectID": "fca.html#funciones-interesantes",
    "href": "fca.html#funciones-interesantes",
    "title": "4  Formal Concept Analysis",
    "section": "4.4 Funciones interesantes",
    "text": "4.4 Funciones interesantes\nDentro del paquete fcaR hay funciones interesantes para exportar a Latex, a arules, …\n\nreglas &lt;- fc_datos$implications$to_arules()\n#latex &lt;- fc_datos$implications$to_latex()\n\nTambién podemos hacer gráficos de nuestros conceptos:\n\n#fc_datos$concepts$plot()",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Formal Concept Analysis</span>"
    ]
  },
  {
    "objectID": "regresion.html",
    "href": "regresion.html",
    "title": "5  Regresión",
    "section": "",
    "text": "5.1 Construcción del modelo\nVamos a construir un primer modelo, donde vamos a enfrentar el atributo fake a todas las demás variables. Aunque seguramente no sea el mejor modelo, nos dará una primera idea de cómo podemos ir mejorándolo.\nmodelo1 &lt;- lm(fake ~., data = datos)\nsummary(modelo1)\n\n\nCall:\nlm(formula = fake ~ ., data = datos)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.73096 -0.23729 -0.06653  0.24048  1.01052 \n\nCoefficients:\n                         Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)             7.931e-01  3.798e-02  20.880  &lt; 2e-16 ***\n`profile pic`          -4.380e-01  3.345e-02 -13.094  &lt; 2e-16 ***\n`nums/length username`  8.062e-01  7.522e-02  10.718  &lt; 2e-16 ***\n`fullname words`       -3.354e-02  1.333e-02  -2.516 0.012142 *  \n`nums/length fullname` -2.775e-02  1.212e-01  -0.229 0.818988    \n`name==username`        2.241e-01  7.641e-02   2.933 0.003498 ** \n`description length`   -1.510e-03  4.342e-04  -3.478 0.000544 ***\n`external URL`         -1.542e-01  4.800e-02  -3.213 0.001390 ** \nprivate                -9.459e-03  2.843e-02  -0.333 0.739459    \n`#posts`               -9.094e-05  3.570e-05  -2.547 0.011120 *  \n`#followers`           -9.960e-09  1.539e-08  -0.647 0.517743    \n`#follows`             -1.850e-05  1.499e-05  -1.235 0.217530    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.3166 on 564 degrees of freedom\nMultiple R-squared:  0.6074,    Adjusted R-squared:  0.5998 \nF-statistic: 79.33 on 11 and 564 DF,  p-value: &lt; 2.2e-16\nVemos que obtenemos un modelo que no tiene un mal valor de R-squared, pero sigue siendo bajo. Además, ya podemos visualizar variables que se podrían eliminar. Esto se deduce de ver que su p-value es alto, como por ejemplo en el atributo private. Además de tener un residuo alto.\nVamos a ver gráficas sobre el modelo, donde podemos ver los residuos intuitivamente:\nplot(modelo1)\nPodemos utilizar la gráfica de Residuals vs Leverage para ver la influencia de los puntos en nuestro modelo. Con esta información, observamos que en general no hay muchos puntos que afecten al modelo, los llamados “outliers”; solo podemos distinguir el 45, 25 y 41, los cuales pueden ser eliminados para mejorar el modelo.\nPodemos visualizar la distribución de los residuos para evaluar si estos se comportan de manera aproximadamente normal, un supuesto común en muchos modelos estadísticos.\nplot(density(resid(modelo1)))\nLa forma de la gráfica sugiere que los residuos del modelo no se distribuyen de forma normal y que podría haber problemas con el modelo.\nPor último, vamos a ver el modelo prediciendo gráficamente. Podemos utilizar los datos de prueba que nos proporciona nuestro dataset.\nmodelo1_predic &lt;- predict(modelo1, newdata = datosTest)\n\ndatosTest1 &lt;- datosTest %&gt;% mutate(pred = modelo1_predic)\n\n# Rojos -&gt; Reales, verdes -&gt; Predichos\nggplot(datosTest1, aes(x = pred, y = fake)) +\n  geom_point(color = \"red\") +              \n  geom_point(aes(x = pred, y = pred),      \n             color = \"green\", shape = 1) +\n  labs(title = \"Comparación de valores reales y predichos\",\n       x = \"Valores Predichos\",\n       y = \"Valores Reales\") +\n  theme_minimal()\nVemos que ciertamente, al usar una regresión “lineal”, los valores se disponen en una linea recta, la que corresponde a la ecuación obtenida gracias a lm.\ncoef(modelo1)\n\n           (Intercept)          `profile pic` `nums/length username` \n          7.930850e-01          -4.380333e-01           8.062047e-01 \n      `fullname words` `nums/length fullname`       `name==username` \n         -3.354355e-02          -2.775272e-02           2.240837e-01 \n  `description length`         `external URL`                private \n         -1.510047e-03          -1.542026e-01          -9.459373e-03 \n              `#posts`           `#followers`             `#follows` \n         -9.094368e-05          -9.960487e-09          -1.850049e-05\nUna vez visto que nuestro modelo inicial, con todas las variables, no es del todo bueno, vamos a eliminar variables con p-values altos, outliers, … e intentar mejorarlo.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Regresión</span>"
    ]
  },
  {
    "objectID": "regresion.html#mejorando-el-modelo",
    "href": "regresion.html#mejorando-el-modelo",
    "title": "5  Regresión",
    "section": "5.2 Mejorando el modelo",
    "text": "5.2 Mejorando el modelo\n\n5.2.1 Eliminando Outliers\nVamos a eliminar los valores que están muy separados y que pueden afectar al modelo.\n\ndatos &lt;- datos[-c(45,25,41),]\ndatos &lt;- datos[-c(440,412,396),]\ndatos &lt;- datos[-c(351,364,174),]\ndatos &lt;- datos[-c(140,446,449),]\n\nHay que hacerlo con moderación ya que si eliminamos muchos valores que realmente no son “outliers” estamos obteniendo mejores modelos pero que realmente no son así.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Regresión</span>"
    ]
  },
  {
    "objectID": "regresion.html#eliminar-variables-no-significativas",
    "href": "regresion.html#eliminar-variables-no-significativas",
    "title": "5  Regresión",
    "section": "5.3 Eliminar variables no significativas",
    "text": "5.3 Eliminar variables no significativas\n\nmodelo2 &lt;- lm(fake ~\n                `profile pic`+\n                `nums/length username`+\n                `fullname words`+\n                `name==username`+\n                `description length`+\n                `external URL`+\n                `#posts`    , data = datos)\nsummary(modelo2)\n\n\nCall:\nlm(formula = fake ~ `profile pic` + `nums/length username` + \n    `fullname words` + `name==username` + `description length` + \n    `external URL` + `#posts`, data = datos)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.74205 -0.22951 -0.06475  0.22687  0.83615 \n\nCoefficients:\n                         Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)             8.144e-01  3.594e-02  22.656  &lt; 2e-16 ***\n`profile pic`          -4.297e-01  3.140e-02 -13.685  &lt; 2e-16 ***\n`nums/length username`  7.921e-01  6.561e-02  12.072  &lt; 2e-16 ***\n`fullname words`       -5.062e-02  1.573e-02  -3.218  0.00136 ** \n`name==username`        1.471e-01  7.287e-02   2.019  0.04397 *  \n`description length`   -2.251e-03  4.363e-04  -5.160 3.45e-07 ***\n`external URL`         -5.622e-02  4.740e-02  -1.186  0.23609    \n`#posts`               -3.114e-04  7.568e-05  -4.115 4.46e-05 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.3003 on 556 degrees of freedom\nMultiple R-squared:  0.6443,    Adjusted R-squared:  0.6399 \nF-statistic: 143.9 on 7 and 556 DF,  p-value: &lt; 2.2e-16\n\n\nHemos obtenido un modelo un poco mejor y con menos residuos, ahora vamos a intentar mejorar este modelo usando variables no lineales.\n\nmodelo3 &lt;- lm(fake ~ \n                `profile pic` +\n                `nums/length username` +\n                `fullname words` +\n                `name==username` +\n                `description length` +\n                `external URL` +\n                `#posts` +\n                I(`nums/length username`^2)+\n                I(`description length`^2)+\n                I(`#posts`^2),\n              data = datos)\n\nsummary(modelo3)\n\n\nCall:\nlm(formula = fake ~ `profile pic` + `nums/length username` + \n    `fullname words` + `name==username` + `description length` + \n    `external URL` + `#posts` + I(`nums/length username`^2) + \n    I(`description length`^2) + I(`#posts`^2), data = datos)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-0.7340 -0.1915 -0.0474  0.2155  0.8442 \n\nCoefficients:\n                              Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)                  7.954e-01  3.627e-02  21.933  &lt; 2e-16 ***\n`profile pic`               -3.725e-01  3.123e-02 -11.925  &lt; 2e-16 ***\n`nums/length username`       1.281e+00  1.547e-01   8.283 9.11e-16 ***\n`fullname words`            -4.750e-02  1.510e-02  -3.145  0.00175 ** \n`name==username`             1.168e-01  7.019e-02   1.664  0.09663 .  \n`description length`        -6.116e-03  1.099e-03  -5.568 4.03e-08 ***\n`external URL`              -3.135e-02  4.616e-02  -0.679  0.49739    \n`#posts`                    -8.571e-04  1.760e-04  -4.871 1.45e-06 ***\nI(`nums/length username`^2) -8.867e-01  2.235e-01  -3.967 8.23e-05 ***\nI(`description length`^2)    3.476e-05  8.677e-06   4.006 7.03e-05 ***\nI(`#posts`^2)                6.033e-07  1.666e-07   3.621  0.00032 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.288 on 553 degrees of freedom\nMultiple R-squared:  0.6747,    Adjusted R-squared:  0.6688 \nF-statistic: 114.7 on 10 and 553 DF,  p-value: &lt; 2.2e-16\n\n\nVemos, que nuestro modelo ha mejorado un poco y tenemos menos residuos, que es lo que estamos buscando.\n\nplot(modelo3)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n plot(density(resid(modelo3)))\n\n\n\n\n\n\n\n\nSeguimos teniendo una distribución de residuos asimétrica y no normal.\nVamos a visualizar como predice este nuevo modelo:\n\nmodelo3_predic &lt;- predict(modelo3, newdata = datosTest)\n\ndatosTest3 &lt;- datosTest %&gt;% mutate(pred = modelo3_predic)\n\n# Rojos -&gt; Reales, verdes -&gt; Predichos\nggplot(datosTest3, aes(x = pred, y = fake)) +\n  geom_point(color = \"red\") +              \n  geom_point(aes(x = pred, y = pred),      \n             color = \"green\", shape = 1) +\n  labs(title = \"Comparación de valores reales y predichos\",\n       x = \"Valores Predichos\",\n       y = \"Valores Reales\") +\n  theme_minimal()           \n\n\n\n\n\n\n\n\nSin embargo, este gráfico, al ser los valores entre 0 y 1 es un poco confuso, vamos a ver el porcentaje de acierto mejor:\n\ndatosTest3 &lt;- datosTest3 %&gt;% mutate(pred = ifelse(modelo3_predic &lt; 0.5, 0, 1))\n# Calcular el porcentaje de aciertos\naccuracy &lt;- mean(datosTest3$pred == datosTest3$fake) * 100\naccuracy\n\n[1] 87.5\n\n\nVemos que ha acertado un 87.5% de las veces, un dato bastante bueno.\n\n5.3.1 Exportar el modelo\nPara poder utilizar el modelo en futuras aplicaciones, podemos guardarlo de la forma:\n\nsave(modelo3, file = \"modelo3.rds\")",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Regresión</span>"
    ]
  },
  {
    "objectID": "regresion.html#interacciones-entre-variables",
    "href": "regresion.html#interacciones-entre-variables",
    "title": "5  Regresión",
    "section": "5.4 Interacciones entre variables",
    "text": "5.4 Interacciones entre variables\nAl incluir términos de interacción en el modelo de regresión, permitimos que el efecto de una variable sobre la otra varíe según los niveles de otras variables incluidas en la interacción.\nEsto puede ser importante para capturar relaciones más complejas entre las variables.\n\nmodelo_interact &lt;- lm(fake ~ `profile pic` * `nums/length username` +\n                                       `fullname words` * `description length` +\n                                       `name==username` * `external URL` +\n                                       `#posts`, data = datos)\nsummary(modelo_interact)\n\n\nCall:\nlm(formula = fake ~ `profile pic` * `nums/length username` + \n    `fullname words` * `description length` + `name==username` * \n    `external URL` + `#posts`, data = datos)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.96028 -0.15321  0.00288  0.06898  0.93053 \n\nCoefficients:\n                                        Estimate Std. Error t value Pr(&gt;|t|)\n(Intercept)                            1.032e+00  4.025e-02  25.644  &lt; 2e-16\n`profile pic`                         -7.191e-01  4.077e-02 -17.637  &lt; 2e-16\n`nums/length username`                 4.660e-02  9.326e-02   0.500 0.617496\n`fullname words`                      -5.708e-02  1.795e-02  -3.180 0.001555\n`description length`                  -2.705e-03  7.093e-04  -3.814 0.000152\n`name==username`                       1.487e-01  6.866e-02   2.166 0.030756\n`external URL`                        -3.287e-02  4.372e-02  -0.752 0.452397\n`#posts`                              -2.603e-04  6.964e-05  -3.738 0.000204\n`profile pic`:`nums/length username`   1.250e+00  1.214e-01  10.297  &lt; 2e-16\n`fullname words`:`description length`  4.841e-04  3.308e-04   1.463 0.143985\n`name==username`:`external URL`       -1.903e-01  2.866e-01  -0.664 0.507019\n                                         \n(Intercept)                           ***\n`profile pic`                         ***\n`nums/length username`                   \n`fullname words`                      ** \n`description length`                  ***\n`name==username`                      *  \n`external URL`                           \n`#posts`                              ***\n`profile pic`:`nums/length username`  ***\n`fullname words`:`description length`    \n`name==username`:`external URL`          \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.2749 on 553 degrees of freedom\nMultiple R-squared:  0.7037,    Adjusted R-squared:  0.6984 \nF-statistic: 131.3 on 10 and 553 DF,  p-value: &lt; 2.2e-16\n\n# Guardar el modelo en un archivo\nsaveRDS(modelo_interact, file = \"modelo_interact.rds\")\n\nEste modelo vemos que ha mejorado frente a todos loa anteriores, por lo que tenemos que tenerlo en cuenta para nuestro modelo final.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Regresión</span>"
    ]
  },
  {
    "objectID": "regresion.html#ingeniería-de-variables",
    "href": "regresion.html#ingeniería-de-variables",
    "title": "5  Regresión",
    "section": "5.5 Ingeniería de variables",
    "text": "5.5 Ingeniería de variables\nLa ingeniería de variables implica crear nuevas variables o transformar las existentes para mejorar el rendimiento de un modelo predictivo. Esto incluye crear características nuevas, transformar las existentes, entre otras técnicas.\nVamos a probarlo en nuestro modelo.\n\nmodelo_nuevasVar &lt;- lm(fake ~ `profile pic`+\n                                    `nums/length username` +\n                                    log(`description length` + 1) +\n                                    `name==username` +\n                                    log(`#posts`+1), data = datos)\nsummary(modelo_nuevasVar)\n\n\nCall:\nlm(formula = fake ~ `profile pic` + `nums/length username` + \n    log(`description length` + 1) + `name==username` + log(`#posts` + \n    1), data = datos)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.66063 -0.18128 -0.01962  0.16008  0.96220 \n\nCoefficients:\n                               Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)                    0.839917   0.028606  29.362  &lt; 2e-16 ***\n`profile pic`                 -0.248421   0.033391  -7.440 3.83e-13 ***\n`nums/length username`         0.659306   0.061590  10.705  &lt; 2e-16 ***\nlog(`description length` + 1) -0.050486   0.007843  -6.437 2.62e-10 ***\n`name==username`               0.107825   0.066988   1.610    0.108    \nlog(`#posts` + 1)             -0.080978   0.007900 -10.251  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.2757 on 558 degrees of freedom\nMultiple R-squared:  0.6992,    Adjusted R-squared:  0.6965 \nF-statistic: 259.4 on 5 and 558 DF,  p-value: &lt; 2.2e-16\n\n# Guardar el modelo en un archivo\nsaveRDS(modelo_nuevasVar, file = \"modelo_nuevasVar.rds\")\n\nDe nuevo, este modelo ha sido mejor que todos los anteriores simplemente añadiendo el logaritmo de unas variables.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Regresión</span>"
    ]
  },
  {
    "objectID": "regresion.html#modelo-final",
    "href": "regresion.html#modelo-final",
    "title": "5  Regresión",
    "section": "5.6 Modelo final",
    "text": "5.6 Modelo final\nVamos a combinar todos los métodos anteriores para encontrar el mejor modelo posible. Aplicaremos tanto variables no lineales como ingeniería de variables e interacción entre variables.\n\nmodelo_final &lt;- lm(fake ~ `profile pic` * `nums/length username` +\n                                log(`description length` + 1) +\n                                `name==username` +\n                                log(`#posts`+1)+\n                                `#followers` +\n                                I(`nums/length username`^2)+\n                                I(`description length`^2)+\n                                I(`#posts`^2),\n                         data = datos)\n\nsummary(modelo_final)\n\n\nCall:\nlm(formula = fake ~ `profile pic` * `nums/length username` + \n    log(`description length` + 1) + `name==username` + log(`#posts` + \n    1) + `#followers` + I(`nums/length username`^2) + I(`description length`^2) + \n    I(`#posts`^2), data = datos)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.70351 -0.11215 -0.00771  0.08622  1.01284 \n\nCoefficients:\n                                       Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)                           9.732e-01  3.395e-02  28.666  &lt; 2e-16 ***\n`profile pic`                        -5.097e-01  4.432e-02 -11.500  &lt; 2e-16 ***\n`nums/length username`                4.255e-01  1.583e-01   2.687  0.00742 ** \nlog(`description length` + 1)        -4.738e-02  9.109e-03  -5.201 2.79e-07 ***\n`name==username`                      9.404e-02  6.232e-02   1.509  0.13188    \nlog(`#posts` + 1)                    -6.765e-02  8.414e-03  -8.041 5.44e-15 ***\n`#followers`                          1.126e-09  2.733e-08   0.041  0.96716    \nI(`nums/length username`^2)          -5.574e-01  2.000e-01  -2.788  0.00549 ** \nI(`description length`^2)             2.373e-06  3.410e-06   0.696  0.48676    \nI(`#posts`^2)                         8.394e-08  6.657e-08   1.261  0.20789    \n`profile pic`:`nums/length username`  1.024e+00  1.158e-01   8.847  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.2557 on 553 degrees of freedom\nMultiple R-squared:  0.7435,    Adjusted R-squared:  0.7389 \nF-statistic: 160.3 on 10 and 553 DF,  p-value: &lt; 2.2e-16\n\n\nVemos que el mejor modelo que hemos conseguido obtener ha mejorado bastante respecto al primer modelo obtenido, teniendo un mejor R cuadrado y menos residuos. Vamos a ver las demás métricas utilizadas anteriormente.\n\nplot(modelo_final)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVamos a generar predicciones con el dataSet de test.\n\n# Generar predicciones\nmodeloFinal_predic &lt;- predict(modelo_final, newdata = datosTest)\n\n\ndatosTestFinal &lt;- datosTest %&gt;% mutate(pred = ifelse(modeloFinal_predic &lt; 0.5, 0, 1))\n# Calcular el porcentaje de aciertos\naccuracy &lt;- mean(datosTestFinal$pred == datosTestFinal$fake) * 100\naccuracy\n\n[1] 87.5\n\n\nPor último, vemos que obtenemos un buen porcentaje de acierto con nuestro dataSet de prueba,",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Regresión</span>"
    ]
  },
  {
    "objectID": "regresion.html#otros-modelos-de-regresión",
    "href": "regresion.html#otros-modelos-de-regresión",
    "title": "5  Regresión",
    "section": "5.7 Otros modelos de regresión",
    "text": "5.7 Otros modelos de regresión\nVamos a explorar otros modelos de regresión diferentes al clásico modelo de regeresion lineal que hemos estado trabajando hasta ahora. Puede ser que para nuestra investigación, un modelo diferente al lineal sea mas conveniente y nos pudiera ayudar mas.\n\n5.7.1 Random Forest\nRandom Forest es un algoritmo de aprendizaje automático que se basa en la idea de crear múltiples árboles de decisión durante el proceso de entrenamiento y luego combinar sus predicciones para obtener una predicción más robusta y precisa.\n\nlibrary(randomForest)\n\nWarning: package 'randomForest' was built under R version 4.3.3\n\n\nrandomForest 4.7-1.1\n\n\nType rfNews() to see new features/changes/bug fixes.\n\n\n\nAttaching package: 'randomForest'\n\n\nThe following object is masked from 'package:psych':\n\n    outlier\n\n\nThe following object is masked from 'package:ggplot2':\n\n    margin\n\n\nThe following object is masked from 'package:dplyr':\n\n    combine\n\ndatosdf &lt;- data.frame(datos)\n# Crea el modelo de Random Forest\nmodelo_rf &lt;- randomForest(fake ~ .,ntree=4, data = datosdf)\n\nWarning in randomForest.default(m, y, ...): The response has five or fewer\nunique values.  Are you sure you want to do regression?\n\n# Resumen del modelo\nprint(modelo_rf)\n\n\nCall:\n randomForest(formula = fake ~ ., data = datosdf, ntree = 4) \n               Type of random forest: regression\n                     Number of trees: 4\nNo. of variables tried at each split: 3\n\n          Mean of squared residuals: 0.08285584\n                    % Var explained: 66.86\n\n\n\n5.7.1.0.1 Importancia de las variables\n\nimportance(modelo_rf)\n\n                     IncNodePurity\nprofile.pic           9.915185e+00\nnums.length.username  3.282218e+01\nfullname.words        2.443014e+00\nnums.length.fullname  9.283660e-03\nname..username        1.110223e-16\ndescription.length    3.598971e+00\nexternal.URL          4.737802e-01\nprivate               4.920463e-01\nX.posts               1.211513e+01\nX.followers           5.861250e+01\nX.follows             1.457846e+01\n\n\n\nmodeloRF_predic &lt;- predict(modelo_rf, newdata = data.frame(datosTest))\n\n\nmodeloRF_predic &lt;- datosTest %&gt;% mutate(pred = ifelse(modeloRF_predic &lt; 0.5, 0, 1))\n# Calcular el porcentaje de aciertos\naccuracy &lt;- mean(modeloRF_predic$pred == modeloRF_predic$fake) * 100\naccuracy\n\n[1] 91.66667\n\n\n\n\n\n5.7.2 Generalized Additive Model\nUn GAM es un tipo de modelo estadístico que generaliza los modelos lineales al permitir relaciones no lineales entre las variables predictoras y la variable de respuesta.\nEn lugar de suponer una relación lineal entre las variables, los GAM permiten que cada variable explicativa tenga una relación suave con la variable de respuesta, modelada a través de funciones suaves.\n\nlibrary(mgcv)\n\nWarning: package 'mgcv' was built under R version 4.3.3\n\n\nLoading required package: nlme\n\n\nWarning: package 'nlme' was built under R version 4.3.3\n\n\n\nAttaching package: 'nlme'\n\n\nThe following object is masked from 'package:dplyr':\n\n    collapse\n\n\nThis is mgcv 1.9-1. For overview type 'help(\"mgcv-package\")'.\n\nmodelo_gam = gam(fake ~ profile.pic +\n               nums.length.username +\n               fullname.words +\n               nums.length.fullname +\n               name..username +\n               description.length +\n               external.URL +\n               private +\n               X.posts +\n               X.followers +\n               X.follows, \n             data = datosdf)\n\nsummary(modelo_gam)\n\n\nFamily: gaussian \nLink function: identity \n\nFormula:\nfake ~ profile.pic + nums.length.username + fullname.words + \n    nums.length.fullname + name..username + description.length + \n    external.URL + private + X.posts + X.followers + X.follows\n\nParametric coefficients:\n                       Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)           8.190e-01  3.828e-02  21.397  &lt; 2e-16 ***\nprofile.pic          -4.272e-01  3.221e-02 -13.264  &lt; 2e-16 ***\nnums.length.username  7.855e-01  7.193e-02  10.921  &lt; 2e-16 ***\nfullname.words       -5.088e-02  1.587e-02  -3.205 0.001427 ** \nnums.length.fullname  1.413e-02  1.160e-01   0.122 0.903121    \nname..username        1.461e-01  7.724e-02   1.891 0.059126 .  \ndescription.length   -2.262e-03  4.422e-04  -5.115 4.33e-07 ***\nexternal.URL         -5.643e-02  4.800e-02  -1.176 0.240246    \nprivate              -8.206e-03  2.738e-02  -0.300 0.764497    \nX.posts              -3.042e-04  7.783e-05  -3.908 0.000105 ***\nX.followers          -1.982e-08  3.227e-08  -0.614 0.539287    \nX.follows            -3.659e-06  1.456e-05  -0.251 0.801712    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nR-sq.(adj) =  0.638   Deviance explained = 64.5%\nGCV = 0.092734  Scale est. = 0.090761  n = 564\n\n\n\nmodeloGam_predic &lt;- predict(modelo_gam, newdata = data.frame(datosTest))\n\n\nmodeloGam_predic &lt;- datosTest %&gt;% mutate(pred = ifelse(modeloGam_predic &lt; 0.5, 0, 1))\n# Calcular el porcentaje de aciertos\naccuracy &lt;- mean(modeloGam_predic$pred == modeloGam_predic$fake) * 100\naccuracy\n\n[1] 89.16667",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Regresión</span>"
    ]
  },
  {
    "objectID": "regresion.html#conclusiones",
    "href": "regresion.html#conclusiones",
    "title": "5  Regresión",
    "section": "5.8 Conclusiones",
    "text": "5.8 Conclusiones\nHemos explorado tanto los tradicionales modelos lineales como también nuevos enfoques de regresión. Durante este proceso, hemos descubierto modelos interesantes que muestran un potencial considerable para generar predicciones precisas en contextos del mundo real. Al aplicar estos modelos a conjuntos de datos reales, estamos equipados para abordar problemas complejos y tenemos la herramientas para realizar predicciones certeras sobre datos reales, pudiendo servir de verdadera ayuda en el mundo real.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Regresión</span>"
    ]
  },
  {
    "objectID": "seriesTemporales.html",
    "href": "seriesTemporales.html",
    "title": "6  Series Temporales",
    "section": "",
    "text": "Las series temporales y forecasting son dos herramientas fundamentales en el análisis de datos para identificar patrones y predecir valores futuros.\nPara trabajar con series temporales vamos a necesitar los paquetes de paquetes forecast, y tseries.\n\nlibrary(tseries)\n\nWarning: package 'tseries' was built under R version 4.3.3\n\n\nRegistered S3 method overwritten by 'quantmod':\n  method            from\n  as.zoo.data.frame zoo \n\nlibrary(forecast)\n\nWarning: package 'forecast' was built under R version 4.3.3\n\n\nVamos a cargar datos\n\nlibrary(readr) \ndatos &lt;- read_csv(\"Data/train.csv\") \n\nRows: 576 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (12): profile pic, nums/length username, fullname words, nums/length ful...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nSin embargo, como su nombre indica, las series temporales necesitan un atributo que sea el tiempo, para poder ver la evolución de la variable y así analizar posibles patrones. El problema es que nuestro dataset no tiene esos tipos de datos, por lo que puede ser difícil aplicar series temporales.\nVamos a intentar convertir alguna variable en un sustituto del tiempo para ver si podemos aplicar los conocimientos de series temporales.\n\nserieTemporal &lt;- ts(datos$`description length`)\ntime(serieTemporal)\n\nTime Series:\nStart = 1 \nEnd = 576 \nFrequency = 1 \n  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18\n [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36\n [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54\n [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72\n [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90\n [91]  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107 108\n[109] 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126\n[127] 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144\n[145] 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162\n[163] 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180\n[181] 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198\n[199] 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216\n[217] 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234\n[235] 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252\n[253] 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270\n[271] 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288\n[289] 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306\n[307] 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324\n[325] 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342\n[343] 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360\n[361] 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378\n[379] 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396\n[397] 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414\n[415] 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432\n[433] 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450\n[451] 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468\n[469] 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486\n[487] 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504\n[505] 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522\n[523] 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540\n[541] 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558\n[559] 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576\n\n\n\nautoplot(serieTemporal)\n\n\n\n\n\n\n\n\nVemos que ciertamente no podemos hacer un análisis temporal de nuestros datos ya que no tenemos ese componente del tiempo.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Series Temporales</span>"
    ]
  },
  {
    "objectID": "otrasTecnicas.html",
    "href": "otrasTecnicas.html",
    "title": "7  Otras técnicas",
    "section": "",
    "text": "7.1 Análisis de Redes Sociales\nEsta técnica se basa en la teoría de grafos y matemáticas discretas. Sin embargo, para aplicarla, necesitaríamos relaciones entre los datos, como por ejemplo, relaciones entre seguidores y seguidos. Sin embargo, dichas relaciones no están presentes en nuestros datos y no tienen ninguna relación, por lo que no podemos aplicar esta técnica.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Otras técnicas</span>"
    ]
  },
  {
    "objectID": "otrasTecnicas.html#análisis-de-componentes-principales",
    "href": "otrasTecnicas.html#análisis-de-componentes-principales",
    "title": "7  Otras técnicas",
    "section": "7.2 Análisis de Componentes Principales",
    "text": "7.2 Análisis de Componentes Principales\nEl análisis de componentes principales es una técnica de reducción de dimensionalidad que permite pasar de una gran cantidad de variables interrelacionadas a unas pocas variables incorreladas entre sí, llamadas componentes principales.\nEsta técnica sería muy útil si nuestro conjunto de datos tuviera una gran cantidad de variables, simplificando muchos procesos. Sin embargo, nuestros datos tienen pocas variables que no causan ningún problema a la hora de manejarlas.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Otras técnicas</span>"
    ]
  },
  {
    "objectID": "demo.html",
    "href": "demo.html",
    "title": "8  Aplicación y demo",
    "section": "",
    "text": "8.1 Descarga los diferentes modelo diseñado\nEnlace Modelos",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Aplicación y demo</span>"
    ]
  },
  {
    "objectID": "demo.html#demo",
    "href": "demo.html#demo",
    "title": "8  Aplicación y demo",
    "section": "8.2 Demo:",
    "text": "8.2 Demo:\nUtilizando los modelo que hemos creado anteriormente, tanto los lineales, random forest, … podemos predecir si una cuenta es fake o no:\n#| standalone: true\n#| viewerHeight: 600\nlibrary(shiny)\nlibrary(tibble)\nlibrary(readr)\nlibrary(randomForest)\nlibrary(mgcv)\n\n\n\n# Define your Shiny UI here\nui &lt;- fluidPage(\n  titlePanel(\"Análisis de Perfil de Usuario\"),\n  sidebarLayout(\n    sidebarPanel(\n      checkboxInput(\"profile_pic\", \"Tiene foto de perfil?\", value = FALSE),\n      numericInput(\"username_ratio\", \"Cantidad de numeros en nombre del usuario:\", value = 0),\n      numericInput(\"fullname_ratio\", \"Cantidad de numeros en el nombre completo:\", value = 0),\n      numericInput(\"fullname_length\", \"Longitud del nombre completo:\", value = 0),\n      checkboxInput(\"name_equals_username\", \"¿El nombre es igual al nombre de usuario?\", value = FALSE),\n      numericInput(\"description_length\", \"Longitud de la descripción:\", value = 0),\n      checkboxInput(\"external_url\", \"Tiene URL externa?\", value = FALSE),\n      checkboxInput(\"private\", \"¿Es una cuenta privada?\", value = FALSE),\n      numericInput(\"num_posts\", \"Número de publicaciones:\", value = 0),\n      numericInput(\"num_followers\", \"Número de seguidores:\", value = 0),\n      numericInput(\"num_follows\", \"Número de seguidos:\", value = 0),\n      fileInput(\"file1\", \"Elige tu modelo de regresion\",\n            accept = c(\"text/rds\",\n                       \"text/comma-separated-values,\n                       .rds\")),\n      actionButton(\"submit_button\", \"Analizar\")\n    ),\n    mainPanel(\n      verbatimTextOutput(\"results\")\n    )\n  )\n)\n\nprocesar_datos &lt;- function(profile_pic, username_ratio, fullname_ratio, fullname_length, name_equals_username,\n                           description_length, external_url, private, num_posts, num_followers, num_follows, modelo_guardado) {\n\n  datos &lt;- tibble(`profile pic` = ifelse(profile_pic, 1, 0),\n                        `nums/length username` = as.numeric(username_ratio),\n                        `fullname words` = as.numeric(fullname_length),\n                        `nums/length fullname` = as.numeric(fullname_ratio),\n                        `name==username` = ifelse(name_equals_username, 1, 0),\n                        `description length` = as.numeric(description_length) ,\n                        `external URL` = ifelse(external_url, 1, 0) ,\n                        `private` = ifelse(private, 1, 0) ,\n                        `#posts` = as.numeric(num_posts) ,\n                        `#followers` = as.numeric(num_followers) ,\n                        `#follows` = as.numeric(num_follows),\n                       )\n  \n  prediction &lt;- tryCatch({\n  predict(modelo_guardado, newdata = datos)\n}, error = function(e) {\n  datos2 &lt;- data.frame(datos)\n  return( predict(modelo_guardado, newdata = datos2))\n})\n  return(ifelse(prediction[[1]] &lt;0.5 , \"Cuenta real\", \"Cuenta falsa\"))\n}\n\n# Define your Shiny server logic here\nserver &lt;- function(input, output, session) {\n  modelo_guardado &lt;- reactive({\n    infile &lt;- input$file1\n    if (is.null(infile)) {\n      return(NULL)\n    }\n   readRDS(infile$datapath)\n  })\n  \n  # Manejar el evento del botón de enviar\n  observeEvent(input$submit_button, {\n    # Llama a la función para procesar los datos y muestra los resultados\n    res &lt;- procesar_datos(input$profile_pic, input$username_ratio, input$fullname_ratio, input$fullname_length,\n                     input$name_equals_username, input$description_length, input$external_url, input$private,\n                     input$num_posts, input$num_followers, input$num_follows, modelo_guardado = modelo_guardado())\n    output$results &lt;- renderPrint({\n      res\n    })\n  })\n}\n\n# Create and launch the Shiny app\nshinyApp(ui, server)",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Aplicación y demo</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "9  Resultados",
    "section": "",
    "text": "Se han realizado diversas actividades de análisis y modelado de datos para comprender y predecir la presencia de cuentas falsas en Instagram, obteniendo insights valiosos y construyendo modelos predictivos para este propósito.\nResultados obtenidos :\n\nIdentificación de características clave para distinguir cuentas reales de falsas, como número de seguidores y seguidos, presencia de foto de perfil y caracteres numéricos en el nombre de usuario.\nDescubrimiento de reglas de asociación e implicaciones que proporcionan insights para detectar cuentas falsas.\nMejora de los modelos de regresión mediante la eliminación de variables no significativas y la inclusión de términos de interacción.\nEvaluación de modelos no lineales como Random Forest como alternativa al modelo lineal tradicional.\n\nHemos obtenido resultados que nos permiten diferenciar entre cuentas falsas y reales de forma sencilla, lo cual era nuestro objetivo principal, por lo que nuestro trabajo ha sido c",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Resultados</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "Referencias",
    "section": "",
    "text": "https://amorabonilla.quarto.pub/-conocimiento-desde-los-datos/",
    "crumbs": [
      "Referencias"
    ]
  }
]